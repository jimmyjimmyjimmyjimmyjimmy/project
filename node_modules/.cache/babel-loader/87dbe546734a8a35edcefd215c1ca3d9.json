{"ast":null,"code":"var _jsxFileName = \"/Users/WAVE/Documents/project/src/shared/components/table/components/ReactTableDnDBody.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { ThemeProps } from '@/shared/prop-types/ReducerProps';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getItemStyle = (draggableStyle, theme) => ({\n  cursor: 'pointer',\n  background: theme.className === 'theme-light' ? '#ffffff' : '#232329',\n  zIndex: 101,\n  ...draggableStyle\n});\n\nconst getListStyle = theme => ({\n  background: theme.className === 'theme-light' ? '#f2f4f7' : '#2a2a31'\n});\n\nconst ReactTableDnDBody = ({\n  page,\n  getTableBodyProps,\n  prepareRow,\n  updateDraggableData,\n  theme\n}) => {\n  const onDragEnd = result => {\n    if (!result.destination) {\n      return;\n    }\n\n    updateDraggableData(result);\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(Droppable, {\n      droppableId: \"draggable\",\n      type: \"data\",\n      children: provided => /*#__PURE__*/_jsxDEV(\"tbody\", {\n        className: \"table table--bordered\",\n        ref: provided.innerRef,\n        ...getTableBodyProps(),\n        ...provided.droppableProps,\n        style: getListStyle(theme),\n        children: [page.map(val => {\n          prepareRow(val);\n          return /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: `${val.id}`,\n            index: Number(val.id),\n            type: \"data\",\n            children: provide => /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"react-dnd-draggable\",\n              ref: provide.innerRef,\n              ...provide.draggableProps,\n              ...provide.dragHandleProps,\n              ...val.getRowProps(),\n              style: getItemStyle(provide.draggableProps.style, theme),\n              children: val.cells.map(cell => /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 21\n            }, this)\n          }, val.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 17\n          }, this);\n        }), provided.placeholder]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ReactTableDnDBody;\nReactTableDnDBody.propTypes = {\n  page: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  getTableBodyProps: PropTypes.func.isRequired,\n  prepareRow: PropTypes.func.isRequired,\n  updateDraggableData: PropTypes.func.isRequired,\n  theme: ThemeProps.isRequired\n};\nexport default ReactTableDnDBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactTableDnDBody\");","map":{"version":3,"sources":["/Users/WAVE/Documents/project/src/shared/components/table/components/ReactTableDnDBody.jsx"],"names":["React","PropTypes","DragDropContext","Draggable","Droppable","ThemeProps","getItemStyle","draggableStyle","theme","cursor","background","className","zIndex","getListStyle","ReactTableDnDBody","page","getTableBodyProps","prepareRow","updateDraggableData","onDragEnd","result","destination","provided","innerRef","droppableProps","map","val","id","Number","provide","draggableProps","dragHandleProps","getRowProps","style","cells","cell","getCellProps","render","placeholder","propTypes","arrayOf","shape","isRequired","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { ThemeProps } from '@/shared/prop-types/ReducerProps';\n\nconst getItemStyle = (draggableStyle, theme) => ({\n  cursor: 'pointer',\n  background: theme.className === 'theme-light' ? '#ffffff' : '#232329',\n  zIndex: 101,\n  ...draggableStyle,\n});\n\nconst getListStyle = theme => ({\n  background: theme.className === 'theme-light' ? '#f2f4f7' : '#2a2a31',\n});\n\nconst ReactTableDnDBody = ({\n  page, getTableBodyProps, prepareRow, updateDraggableData, theme,\n}) => {\n  const onDragEnd = (result) => {\n    if (!result.destination) {\n      return;\n    }\n    updateDraggableData(result);\n  };\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Droppable droppableId=\"draggable\" type=\"data\">\n        {provided => (\n          <tbody\n            className=\"table table--bordered\"\n            ref={provided.innerRef}\n            {...getTableBodyProps()}\n            {...provided.droppableProps}\n            style={getListStyle(theme)}\n          >\n            {page.map((val) => {\n              prepareRow(val);\n              return (\n                <Draggable\n                  draggableId={`${val.id}`}\n                  key={val.id}\n                  index={Number(val.id)}\n                  type=\"data\"\n                >\n                  {provide => (\n                    <tr\n                      className=\"react-dnd-draggable\"\n                      ref={provide.innerRef}\n                      {...provide.draggableProps}\n                      {...provide.dragHandleProps}\n                      {...val.getRowProps()}\n                      style={getItemStyle(\n                        provide.draggableProps.style,\n                        theme,\n                      )}\n                    >\n                      {val.cells.map(cell => (\n                        <td {...cell.getCellProps()}>\n                          {cell.render('Cell')}\n                        </td>\n                      ))}\n                    </tr>\n                  )}\n                </Draggable>\n              );\n            })}\n            {provided.placeholder}\n          </tbody>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n};\n\nReactTableDnDBody.propTypes = {\n  page: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  getTableBodyProps: PropTypes.func.isRequired,\n  prepareRow: PropTypes.func.isRequired,\n  updateDraggableData: PropTypes.func.isRequired,\n  theme: ThemeProps.isRequired,\n};\n\nexport default ReactTableDnDBody;\n"]},"metadata":{},"sourceType":"module"}