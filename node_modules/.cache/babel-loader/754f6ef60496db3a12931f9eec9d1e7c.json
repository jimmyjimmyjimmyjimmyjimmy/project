{"ast":null,"code":"import { createAction } from 'redux-actions';\nimport api from '../../../utils/apiClient';\nexport const fetchTodoListDataRequest = createAction('FETCH_TODO_LIST_DATA_REQUEST');\nexport const fetchTodoListDataSuccess = createAction('FETCH_TODO_LIST_DATA_SUCCESS');\nexport const fetchTodoListDataFailure = createAction('FETCH_TODO_LIST_DATA_FAILURE');\nexport const updateTodoListData = createAction('UPDATE_TODO_LIST_DATA');\nexport const fetchTodoListData = () => async dispatch => {\n  try {\n    dispatch(fetchTodoListDataRequest());\n    const response = await api.todo.getTodoData(); // Fake request example\n\n    const todoListData = response.data;\n    dispatch(fetchTodoListDataSuccess(todoListData));\n  } catch (error) {\n    dispatch(fetchTodoListDataFailure({\n      error\n    }));\n    throw error;\n  }\n};\n\nconst processError = (todoElementData, error, getState) => {\n  const todoListCopy = getState().todo && getState().todo.data && getState().todo.data.elements && [...getState().todo.data.elements];\n  const elementIndex = todoListCopy.findIndex(e => e.data.id === todoElementData.id);\n  todoListCopy[elementIndex] = {\n    data: todoElementData,\n    isEdit: false,\n    isFetching: false,\n    error\n  };\n  return todoListCopy;\n};\n\nconst updateTodoElementData = (newTodoElementData, getState) => {\n  const todoListCopy = [...getState().todo.data.elements];\n  const elementIndex = todoListCopy.findIndex(e => e.data.id === newTodoElementData.id);\n  todoListCopy[elementIndex] = {\n    data: newTodoElementData,\n    isEdit: false,\n    isFetching: false,\n    error: null\n  };\n  return todoListCopy;\n};\n\nexport const editTodoElement = value => async (dispatch, getState) => {\n  let updatedTodoList = [];\n\n  try {\n    updatedTodoList = updateTodoElementData(value, getState);\n    dispatch(updateTodoListData(updatedTodoList));\n  } catch (error) {\n    updatedTodoList = processError(value, error, getState);\n    dispatch(updateTodoListData(updatedTodoList));\n    throw error;\n  }\n};\nexport const deleteTodoElement = id => async (dispatch, getState) => {\n  const todoDataCopy = getState().todo && getState().todo.data && { ...getState().todo.data\n  };\n  const todoListCopy = [...todoDataCopy.elements];\n  const elementIndex = todoListCopy.findIndex(e => e.data.id === id);\n  todoListCopy.splice(elementIndex, 1);\n  dispatch(updateTodoListData(todoListCopy));\n};\nexport const addTodoElement = newElementData => async (dispatch, getState) => {\n  const todoDataCopy = getState().todo && getState().todo.data && { ...getState().todo.data\n  };\n  const todoListCopy = [...todoDataCopy.elements];\n  todoListCopy.unshift({\n    data: { ...newElementData\n    },\n    isEdit: false,\n    // maybe you will need to make it true, depends on your logic\n    isFetching: false,\n    error: null\n  });\n  dispatch(updateTodoListData(todoListCopy));\n};","map":{"version":3,"sources":["/Users/WAVE/Documents/project/src/containers/Todo/redux/actions.js"],"names":["createAction","api","fetchTodoListDataRequest","fetchTodoListDataSuccess","fetchTodoListDataFailure","updateTodoListData","fetchTodoListData","dispatch","response","todo","getTodoData","todoListData","data","error","processError","todoElementData","getState","todoListCopy","elements","elementIndex","findIndex","e","id","isEdit","isFetching","updateTodoElementData","newTodoElementData","editTodoElement","value","updatedTodoList","deleteTodoElement","todoDataCopy","splice","addTodoElement","newElementData","unshift"],"mappings":"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","sourcesContent":["import { createAction } from 'redux-actions';\nimport api from '../../../utils/apiClient';\n\nexport const fetchTodoListDataRequest = createAction('FETCH_TODO_LIST_DATA_REQUEST');\nexport const fetchTodoListDataSuccess = createAction('FETCH_TODO_LIST_DATA_SUCCESS');\nexport const fetchTodoListDataFailure = createAction('FETCH_TODO_LIST_DATA_FAILURE');\nexport const updateTodoListData = createAction('UPDATE_TODO_LIST_DATA');\n\nexport const fetchTodoListData = () => async (dispatch) => {\n  try {\n    dispatch(fetchTodoListDataRequest());\n    const response = await api.todo.getTodoData(); // Fake request example\n    const todoListData = response.data;\n    dispatch(fetchTodoListDataSuccess(todoListData));\n  } catch (error) {\n    dispatch(fetchTodoListDataFailure({ error }));\n    throw error;\n  }\n};\n\nconst processError = (todoElementData, error, getState) => {\n  const todoListCopy = getState().todo && getState().todo.data && getState().todo.data.elements\n    && [...getState().todo.data.elements];\n  const elementIndex = todoListCopy.findIndex(e => e.data.id === todoElementData.id);\n  todoListCopy[elementIndex] = {\n    data: todoElementData,\n    isEdit: false,\n    isFetching: false,\n    error,\n  };\n  return todoListCopy;\n};\n\nconst updateTodoElementData = (newTodoElementData, getState) => {\n  const todoListCopy = [...getState().todo.data.elements];\n  const elementIndex = todoListCopy.findIndex(e => e.data.id === newTodoElementData.id);\n  todoListCopy[elementIndex] = {\n    data: newTodoElementData,\n    isEdit: false,\n    isFetching: false,\n    error: null,\n  };\n  return todoListCopy;\n};\n\nexport const editTodoElement = value => async (dispatch, getState) => {\n  let updatedTodoList = [];\n  try {\n    updatedTodoList = updateTodoElementData(value, getState);\n    dispatch(updateTodoListData(updatedTodoList));\n  } catch (error) {\n    updatedTodoList = processError(value, error, getState);\n    dispatch(updateTodoListData(updatedTodoList));\n    throw error;\n  }\n};\n\nexport const deleteTodoElement = id => async (dispatch, getState) => {\n  const todoDataCopy = getState().todo && getState().todo.data && { ...getState().todo.data };\n  const todoListCopy = [...todoDataCopy.elements];\n  const elementIndex = todoListCopy.findIndex(e => e.data.id === id);\n  todoListCopy.splice(elementIndex, 1);\n  dispatch(updateTodoListData(todoListCopy));\n};\n\nexport const addTodoElement = newElementData => async (dispatch, getState) => {\n  const todoDataCopy = getState().todo && getState().todo.data && { ...getState().todo.data };\n  const todoListCopy = [...todoDataCopy.elements];\n  todoListCopy.unshift({\n    data: {\n      ...newElementData,\n    },\n    isEdit: false, // maybe you will need to make it true, depends on your logic\n    isFetching: false,\n    error: null,\n  });\n  dispatch(updateTodoListData(todoListCopy));\n};\n"]},"metadata":{},"sourceType":"module"}