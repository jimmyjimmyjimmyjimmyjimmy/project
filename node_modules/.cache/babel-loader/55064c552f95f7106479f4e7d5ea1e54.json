{"ast":null,"code":"var _jsxFileName = \"/Users/WAVE/Documents/project/src/containers/ECommerce/OrdersList/components/CreateData.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport { Badge } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MoneyFormatter = ({\n  value\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: [\"$\", value]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 3\n}, this);\n\n_c = MoneyFormatter;\nMoneyFormatter.propTypes = {\n  value: PropTypes.string.isRequired\n};\n\nconst StatusFormatter = ({\n  value\n}) => value === 'Enabled' ? /*#__PURE__*/_jsxDEV(\"span\", {\n  className: \"badge badge-success\",\n  children: \"Enabled\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 16,\n  columnNumber: 25\n}, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n  className: \"badge badge-disabled\",\n  children: \"Disabled\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 17,\n  columnNumber: 7\n}, this);\n\n_c2 = StatusFormatter;\nStatusFormatter.propTypes = {\n  value: PropTypes.string.isRequired\n};\n\nconst CreateDataOrderListTable = () => {\n  _s();\n\n  const columns = useMemo(() => [{\n    accessor: 'id',\n    Header: 'ID',\n    width: 80,\n    disableGlobalFilter: true\n  }, {\n    accessor: 'date',\n    Header: 'Date',\n    disableSortBy: true,\n    disableGlobalFilter: true\n  }, {\n    accessor: 'customer_name',\n    Header: 'Customer Name'\n  }, {\n    accessor: 'price',\n    Header: 'Price',\n    formatter: MoneyFormatter\n  }, {\n    accessor: 'tax',\n    Header: 'Tax',\n    formatter: MoneyFormatter\n  }, {\n    accessor: 'delivery',\n    Header: 'Delivery',\n    formatter: MoneyFormatter\n  }, {\n    accessor: 'quantity',\n    Header: 'Quantity'\n  }, {\n    accessor: 'status',\n    Header: 'Status',\n    disableGlobalFilter: true,\n    disableSortBy: true,\n    formatter: StatusFormatter,\n    width: 110\n  }], []);\n\n  const getRandomDate = (start, end) => new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())).toLocaleDateString();\n\n  const data = [];\n\n  const rows = () => {\n    for (let i = 1; i < 36; i += 1) {\n      data.push({\n        id: Math.min(99999, Math.round(Math.random() * 99999 + 1000)),\n        date: getRandomDate(new Date(2017, 3, 1), new Date(2018, 3, 1)),\n        customer_name: ['Maria', 'Bobby  ', 'Alexander'][Math.floor(Math.random() * 3)],\n        price: Math.min(1000, Math.random() * 1000 + 20).toFixed(2),\n        tax: Math.min(10, Math.random() * 10).toFixed(2),\n        delivery: Math.min(10, Math.random() * 10).toFixed(2),\n        quantity: Math.min(5, Math.round(Math.random() * 5 + 1)),\n        status: [/*#__PURE__*/_jsxDEV(Badge, {\n          color: \"success\",\n          children: \"Enable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(Badge, {\n          color: \"secondary\",\n          children: \"Disable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 12\n        }, this)][Math.floor(Math.random() * 2)]\n      });\n    }\n  };\n\n  rows();\n  const orderListTableData = {\n    tableHeaderData: columns,\n    tableRowsData: data\n  };\n  return orderListTableData;\n};\n\n_s(CreateDataOrderListTable, \"erkfbBpUuAY09jdvhSOqc0XsEHQ=\");\n\n_c3 = CreateDataOrderListTable;\nexport default CreateDataOrderListTable;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"MoneyFormatter\");\n$RefreshReg$(_c2, \"StatusFormatter\");\n$RefreshReg$(_c3, \"CreateDataOrderListTable\");","map":{"version":3,"sources":["/Users/WAVE/Documents/project/src/containers/ECommerce/OrdersList/components/CreateData.jsx"],"names":["React","useMemo","Badge","PropTypes","MoneyFormatter","value","propTypes","string","isRequired","StatusFormatter","CreateDataOrderListTable","columns","accessor","Header","width","disableGlobalFilter","disableSortBy","formatter","getRandomDate","start","end","Date","getTime","Math","random","toLocaleDateString","data","rows","i","push","id","min","round","date","customer_name","floor","price","toFixed","tax","delivery","quantity","status","orderListTableData","tableHeaderData","tableRowsData"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { Badge } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nconst MoneyFormatter = ({ value }) => (\n  <div>\n    ${value}\n  </div>\n);\n\nMoneyFormatter.propTypes = {\n  value: PropTypes.string.isRequired,\n};\n\nconst StatusFormatter = ({ value }) => (\n  value === 'Enabled' ? <span className=\"badge badge-success\">Enabled</span>\n    : <span className=\"badge badge-disabled\">Disabled</span>\n);\n\nStatusFormatter.propTypes = {\n  value: PropTypes.string.isRequired,\n};\n\nconst CreateDataOrderListTable = () => {\n  const columns = useMemo(\n    () => [\n      {\n        accessor: 'id',\n        Header: 'ID',\n        width: 80,\n        disableGlobalFilter: true,\n      },\n      {\n        accessor: 'date',\n        Header: 'Date',\n        disableSortBy: true,\n        disableGlobalFilter: true,\n      },\n      {\n        accessor: 'customer_name',\n        Header: 'Customer Name',\n      },\n      {\n        accessor: 'price',\n        Header: 'Price',\n        formatter: MoneyFormatter,\n      },\n      {\n        accessor: 'tax',\n        Header: 'Tax',\n        formatter: MoneyFormatter,\n      },\n      {\n        accessor: 'delivery',\n        Header: 'Delivery',\n        formatter: MoneyFormatter,\n      },\n      {\n        accessor: 'quantity',\n        Header: 'Quantity',\n      },\n      {\n        accessor: 'status',\n        Header: 'Status',\n        disableGlobalFilter: true,\n        disableSortBy: true,\n        formatter: StatusFormatter,\n        width: 110,\n      },\n    ], [],\n  );\n\n  const getRandomDate = (start, end) => new Date(start.getTime() + (Math.random() * (end.getTime()\n      - start.getTime()))).toLocaleDateString();\n\n  const data = [];\n  const rows = () => {\n    for (let i = 1; i < 36; i += 1) {\n      data.push({\n        id: Math.min(99999, Math.round((Math.random() * 99999) + 1000)),\n        date: getRandomDate(new Date(2017, 3, 1), new Date(2018, 3, 1)),\n        customer_name: ['Maria', 'Bobby  ', 'Alexander'][Math.floor((Math.random() * 3))],\n        price: Math.min(1000, (Math.random() * 1000) + 20).toFixed(2),\n        tax: Math.min(10, Math.random() * 10).toFixed(2),\n        delivery: Math.min(10, Math.random() * 10).toFixed(2),\n        quantity: Math.min(5, Math.round((Math.random() * 5) + 1)),\n        status: [\n          (<Badge color=\"success\">Enable</Badge>),\n          (<Badge color=\"secondary\">Disable</Badge>),\n        ][Math.floor((Math.random() * 2))],\n      });\n    }\n  };\n\n  rows();\n  const orderListTableData = { tableHeaderData: columns, tableRowsData: data };\n  return orderListTableData;\n};\n\nexport default CreateDataOrderListTable;\n"]},"metadata":{},"sourceType":"module"}