{"ast":null,"code":"var _jsxFileName = \"/Users/WAVE/Documents/project/src/containers/Dashboards/App/components/ActiveUsers.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport Panel from '@/shared/components/Panel';\nimport getTooltipStyles from '@/shared/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getRandomArbitrary = (minValue, maxValue) => {\n  const ratio = maxValue - minValue + minValue;\n  return Math.random() * ratio;\n};\n\nconst generateRandomData = (dataLength, minDeviationValue, maxDeviationValue, minRange, maxRange) => {\n  const rangeFactor = (maxRange - minRange) / dataLength;\n  return Array.from({\n    length: dataLength\n  }, (v, k) => ({\n    name: k,\n    point: k * rangeFactor + getRandomArbitrary(minDeviationValue, maxDeviationValue),\n    amt: 2000\n  }));\n};\n\nconst data = generateRandomData(100, -2000, 2000, 300, 6000);\n\nconst tickFormer = tick => `${tick / 1000}k`;\n\nconst ActiveUsers = ({\n  dir,\n  themeName\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation('common');\n  return /*#__PURE__*/_jsxDEV(Panel, {\n    lg: 6,\n    xl: 9,\n    md: 12,\n    title: t('app_dashboard.active_users'),\n    subhead: \"See how users involve into app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      dir: \"ltr\",\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        height: 195,\n        className: \"dashboard__active-users-chart\",\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          height: 195,\n          data: data,\n          children: [/*#__PURE__*/_jsxDEV(YAxis, {\n            tickLine: false,\n            tickFormatter: tickFormer,\n            interval: \"preserveStartEnd\",\n            width: 50,\n            orientation: dir === 'rtl' ? 'right' : 'left'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            hide: true,\n            padding: {\n              left: 30,\n              right: 30\n            },\n            reversed: dir === 'rtl'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n            vertical: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, { ...getTooltipStyles(themeName, 'defaultItems')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"linear\",\n            dataKey: \"point\",\n            dot: false,\n            stroke: \"#b8e986\",\n            strokeWidth: 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ActiveUsers, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ActiveUsers;\nActiveUsers.propTypes = {\n  dir: PropTypes.string.isRequired,\n  themeName: PropTypes.string.isRequired\n};\nexport default connect(state => ({\n  themeName: state.theme.className\n}))(ActiveUsers);\n\nvar _c;\n\n$RefreshReg$(_c, \"ActiveUsers\");","map":{"version":3,"sources":["/Users/WAVE/Documents/project/src/containers/Dashboards/App/components/ActiveUsers.jsx"],"names":["React","PropTypes","connect","useTranslation","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","Panel","getTooltipStyles","getRandomArbitrary","minValue","maxValue","ratio","Math","random","generateRandomData","dataLength","minDeviationValue","maxDeviationValue","minRange","maxRange","rangeFactor","Array","from","length","v","k","name","point","amt","data","tickFormer","tick","ActiveUsers","dir","themeName","t","left","right","propTypes","string","isRequired","state","theme","className"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n} from 'recharts';\nimport Panel from '@/shared/components/Panel';\nimport getTooltipStyles from '@/shared/helpers';\n\nconst getRandomArbitrary = (minValue, maxValue) => {\n  const ratio = (maxValue - minValue) + minValue;\n  return Math.random() * ratio;\n};\n\nconst generateRandomData = (dataLength, minDeviationValue, maxDeviationValue, minRange, maxRange) => {\n  const rangeFactor = (maxRange - minRange) / dataLength;\n\n  return Array.from({ length: dataLength }, (v, k) => (\n    {\n      name: k,\n      point: (k * rangeFactor) + getRandomArbitrary(minDeviationValue, maxDeviationValue),\n      amt: 2000,\n    }));\n};\n\nconst data = generateRandomData(100, -2000, 2000, 300, 6000);\n\nconst tickFormer = tick => `${tick / 1000}k`;\n\nconst ActiveUsers = ({ dir, themeName }) => {\n  const { t } = useTranslation('common');\n\n  return (\n    <Panel\n      lg={6}\n      xl={9}\n      md={12}\n      title={t('app_dashboard.active_users')}\n      subhead=\"See how users involve into app\"\n    >\n      <div dir=\"ltr\">\n        <ResponsiveContainer height={195} className=\"dashboard__active-users-chart\">\n          <LineChart\n            height={195}\n            data={data}\n          >\n            <YAxis\n              tickLine={false}\n              tickFormatter={tickFormer}\n              interval=\"preserveStartEnd\"\n              width={50}\n              orientation={dir === 'rtl' ? 'right' : 'left'}\n            />\n            <XAxis\n              hide\n              padding={{ left: 30, right: 30 }}\n              reversed={dir === 'rtl'}\n            />\n            <CartesianGrid vertical={false} />\n            <Tooltip {...getTooltipStyles(themeName, 'defaultItems')} />\n            <Line type=\"linear\" dataKey=\"point\" dot={false} stroke=\"#b8e986\" strokeWidth={2} />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    </Panel>\n  );\n};\n\nActiveUsers.propTypes = {\n  dir: PropTypes.string.isRequired,\n  themeName: PropTypes.string.isRequired,\n};\n\nexport default connect(state => ({ themeName: state.theme.className }))(ActiveUsers);\n"]},"metadata":{},"sourceType":"module"}