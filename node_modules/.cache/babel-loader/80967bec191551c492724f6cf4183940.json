{"ast":null,"code":"var _jsxFileName = \"/Users/WAVE/Documents/project/src/containers/Maps/VectorMapWithRequestData/components/Map.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport * as am4core from '@amcharts/amcharts4/core';\nimport * as am4maps from '@amcharts/amcharts4/maps';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport { transparentize } from 'polished';\nimport maps from '../../VectorMap/components/world'; // you can find demos here: https://www.amcharts.com/demos\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst strokeColor = '#f67513';\nconst mapMainColor = '#f67513';\nconst lightGrayColor = '#F2F2F2';\nconst lightTextColor = '#93A2AF';\nconst whiteColor = '#FFFFFF';\nconst heatRule = {\n  property: 'fill',\n  min: am4core.color('#ffffff')\n};\n\nconst Map = ({\n  mapData\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation('common');\n  useEffect(() => {\n    const map = am4core.create('chartdiv', am4maps.MapChart);\n    map.geodata = maps;\n    map.centerMapOnZoomOut = false; // Set projection\n\n    map.projection = new am4maps.projections.Miller();\n    const polygonSeries = map.series.push(new am4maps.MapPolygonSeries());\n    heatRule.max = am4core.color(mapMainColor);\n    heatRule.target = polygonSeries.mapPolygons.template;\n    polygonSeries.heatRules.push(heatRule);\n    polygonSeries.useGeodata = true;\n    const label = map.createChild(am4core.Label);\n    label.text = t('vector_map.cases_of_infection');\n    label.fontSize = 12;\n    label.align = 'center';\n    label.valign = 'bottom';\n    label.fill = am4core.color(lightTextColor);\n    label.padding(0, 0, 50, 0);\n    const noDataLabel = map.createChild(am4core.Label);\n    noDataLabel.text = t('no_available_data');\n    noDataLabel.fontSize = 12;\n    noDataLabel.align = 'center';\n    noDataLabel.valign = 'middle';\n    noDataLabel.padding(10, 20, 10, 20);\n    noDataLabel.background.fill = am4core.color(lightGrayColor);\n    noDataLabel.background.stroke = am4core.color('#000000');\n    noDataLabel.fillOpacity = mapData === null || mapData.length === 0 ? 1 : 0;\n    noDataLabel.background.strokeOpacity = mapData === null || mapData.length === 0 ? 1 : 0;\n    const heatLegend = map.createChild(am4maps.HeatLegend);\n    heatLegend.series = polygonSeries;\n    heatLegend.padding(0, 20, 12, 20);\n    heatLegend.width = 300;\n    heatLegend.valueAxis.renderer.minGridDistance = 60;\n    heatLegend.valueAxis.numberFormatter.numberFormat = '#.a';\n    heatLegend.valueAxis.renderer.labels.template.adapter.add('text', text => mapData && mapData.length > 0 ? text : '');\n    heatLegend.align = 'center';\n    heatLegend.valign = 'bottom';\n    heatLegend.minColor = '#FFF';\n    heatLegend.maxColor = mapMainColor;\n    heatLegend.valueAxis.tooltip.background.fill = am4core.color(whiteColor);\n    heatLegend.valueAxis.tooltip.background.stroke = am4core.color(mapMainColor);\n    heatLegend.valueAxis.tooltip.label.fill = am4core.color('#000');\n    heatLegend.stroke = am4core.color(lightTextColor);\n    heatLegend.valueAxis.strokeWidth = 0;\n    const polygonTemplate = polygonSeries.mapPolygons.template;\n    let minRange = heatLegend.valueAxis.axisRanges.create();\n    minRange.label.paddingTop = -15;\n    let maxRange = heatLegend.valueAxis.axisRanges.create();\n    maxRange.label.paddingTop = -15;\n    heatLegend.valueAxis.renderer.labels.template.adapter.add('text', () => '');\n    polygonSeries.events.on('datavalidated', () => {\n      const min = heatLegend.series.dataItem.values.value.low;\n      minRange = heatLegend.valueAxis.axisRanges.getIndex(0);\n      minRange.value = min;\n      minRange.label.text = `${min}`;\n      const max = heatLegend.series.dataItem.values.value.high;\n      maxRange = heatLegend.valueAxis.axisRanges.getIndex(1);\n      maxRange.value = max;\n      maxRange.label.text = `${heatLegend.numberFormatter.format(max)}`;\n      minRange.label.fill = am4core.color(lightTextColor);\n      maxRange.label.fill = am4core.color(lightTextColor);\n\n      if (min === max) {\n        minRange.label.paddingRight = 300;\n        maxRange.label.paddingLeft = 300;\n      } else {\n        minRange.label.paddingRight = 45;\n        maxRange.label.paddingLeft = 45;\n      }\n    });\n    polygonTemplate.nonScalingStroke = true;\n    polygonTemplate.strokeWidth = 0.5;\n    polygonTemplate.fill = am4core.color('#f7f7f7');\n    polygonTemplate.stroke = am4core.color('#999999');\n\n    const tooltipFormatter = target => {\n      const {\n        dataContext\n      } = target.dataItem;\n      const textValue = dataContext.value >= 0 ? `${dataContext.value}` : '';\n      return `${t(`vector_map.countries.${dataContext['hc-key']}`)}\\n\n      Cases: ${textValue !== '' ? textValue : 0}\\n\n      Deaths: ${dataContext.deaths ? dataContext.deaths : 0}\\n\n      Recovered: ${dataContext.recovered ? dataContext.recovered : 0}`;\n    };\n\n    polygonSeries.data = mapData ? [...mapData] : [];\n    polygonTemplate.adapter.add('tooltipText', (text, target) => tooltipFormatter(target));\n    polygonSeries.tooltip.getFillFromObject = false;\n    polygonSeries.tooltip.background.fill = am4core.color(`${transparentize(0.2, '#FFF')}`);\n    polygonSeries.tooltip.label.fill = am4core.color('#000');\n\n    const handleHover = mapPolygon => {\n      // eslint-disable-next-line no-restricted-globals\n      if (!isNaN(mapPolygon.dataItem.value)) {\n        heatLegend.valueAxis.showTooltipAt(mapPolygon.dataItem.value);\n      } else {\n        heatLegend.valueAxis.hideTooltip();\n      }\n    };\n\n    polygonSeries.mapPolygons.template.events.on('over', event => {\n      handleHover(event.target);\n    });\n    polygonSeries.mapPolygons.template.events.on('hit', event => {\n      handleHover(event.target);\n    });\n    polygonSeries.mapPolygons.template.events.on('out', () => {\n      heatLegend.valueAxis.hideTooltip();\n    });\n    const hs = polygonTemplate.states.create('hover');\n    hs.properties.stroke = am4core.color(strokeColor);\n    hs.properties.strokeWidth = 2;\n    const zoomControl = new am4maps.ZoomControl();\n    zoomControl.align = 'left';\n    zoomControl.valign = 'middle';\n    map.zoomControl = zoomControl;\n  }, [t, mapData]);\n  return /*#__PURE__*/_jsxDEV(Col, {\n    md: 12,\n    lg: 12,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card__title\",\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"bold-text\",\n            children: t('maps.vector_map.vector_world_map')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"chartdiv\",\n          style: {\n            width: '100%',\n            height: '55vh'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Map, \"yIHkV3cUFHCxFeD16vLIxDL2JDQ=\", false, function () {\n  return [useTranslation];\n});\n\n_c = Map;\nMap.propTypes = {\n  mapData: PropTypes.arrayOf(PropTypes.shape())\n};\nMap.defaultProps = {\n  mapData: []\n};\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/WAVE/Documents/project/src/containers/Maps/VectorMapWithRequestData/components/Map.jsx"],"names":["React","useEffect","PropTypes","useTranslation","am4core","am4maps","Card","CardBody","Col","transparentize","maps","strokeColor","mapMainColor","lightGrayColor","lightTextColor","whiteColor","heatRule","property","min","color","Map","mapData","t","map","create","MapChart","geodata","centerMapOnZoomOut","projection","projections","Miller","polygonSeries","series","push","MapPolygonSeries","max","target","mapPolygons","template","heatRules","useGeodata","label","createChild","Label","text","fontSize","align","valign","fill","padding","noDataLabel","background","stroke","fillOpacity","length","strokeOpacity","heatLegend","HeatLegend","width","valueAxis","renderer","minGridDistance","numberFormatter","numberFormat","labels","adapter","add","minColor","maxColor","tooltip","strokeWidth","polygonTemplate","minRange","axisRanges","paddingTop","maxRange","events","on","dataItem","values","value","low","getIndex","high","format","paddingRight","paddingLeft","nonScalingStroke","tooltipFormatter","dataContext","textValue","deaths","recovered","data","getFillFromObject","handleHover","mapPolygon","isNaN","showTooltipAt","hideTooltip","event","hs","states","properties","zoomControl","ZoomControl","height","propTypes","arrayOf","shape","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\nimport * as am4core from '@amcharts/amcharts4/core';\nimport * as am4maps from '@amcharts/amcharts4/maps';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport { transparentize } from 'polished';\nimport maps from '../../VectorMap/components/world';\n\n// you can find demos here: https://www.amcharts.com/demos\n\nconst strokeColor = '#f67513';\nconst mapMainColor = '#f67513';\nconst lightGrayColor = '#F2F2F2';\nconst lightTextColor = '#93A2AF';\nconst whiteColor = '#FFFFFF';\n\nconst heatRule = {\n  property: 'fill',\n  min: am4core.color('#ffffff'),\n};\n\nconst Map = ({ mapData }) => {\n  const { t } = useTranslation('common');\n\n  useEffect(() => {\n    const map = am4core.create('chartdiv', am4maps.MapChart);\n\n    map.geodata = maps;\n\n    map.centerMapOnZoomOut = false;\n    // Set projection\n    map.projection = new am4maps.projections.Miller();\n\n    const polygonSeries = map.series.push(new am4maps.MapPolygonSeries());\n\n    heatRule.max = am4core.color(mapMainColor);\n    heatRule.target = polygonSeries.mapPolygons.template;\n\n    polygonSeries.heatRules.push(heatRule);\n\n    polygonSeries.useGeodata = true;\n    const label = map.createChild(am4core.Label);\n    label.text = t('vector_map.cases_of_infection');\n    label.fontSize = 12;\n    label.align = 'center';\n    label.valign = 'bottom';\n    label.fill = am4core.color(lightTextColor);\n    label.padding(0, 0, 50, 0);\n    const noDataLabel = map.createChild(am4core.Label);\n    noDataLabel.text = t('no_available_data');\n    noDataLabel.fontSize = 12;\n    noDataLabel.align = 'center';\n    noDataLabel.valign = 'middle';\n    noDataLabel.padding(10, 20, 10, 20);\n    noDataLabel.background.fill = am4core.color(lightGrayColor);\n    noDataLabel.background.stroke = am4core.color('#000000');\n    noDataLabel.fillOpacity = mapData === null || mapData.length === 0 ? 1 : 0;\n    noDataLabel.background.strokeOpacity = mapData === null || mapData.length === 0 ? 1 : 0;\n    const heatLegend = map.createChild(am4maps.HeatLegend);\n    heatLegend.series = polygonSeries;\n    heatLegend.padding(0, 20, 12, 20);\n    heatLegend.width = 300;\n    heatLegend.valueAxis.renderer.minGridDistance = 60;\n    heatLegend.valueAxis.numberFormatter.numberFormat = '#.a';\n    heatLegend.valueAxis.renderer.labels.template.adapter.add(\n      'text', text => (mapData && mapData.length > 0 ? text : ''),\n    );\n    heatLegend.align = 'center';\n    heatLegend.valign = 'bottom';\n    heatLegend.minColor = '#FFF';\n    heatLegend.maxColor = mapMainColor;\n    heatLegend.valueAxis.tooltip.background.fill = am4core.color(whiteColor);\n    heatLegend.valueAxis.tooltip.background.stroke = am4core.color(mapMainColor);\n    heatLegend.valueAxis.tooltip.label.fill = am4core.color('#000');\n    heatLegend.stroke = am4core.color(lightTextColor);\n    heatLegend.valueAxis.strokeWidth = 0;\n\n    const polygonTemplate = polygonSeries.mapPolygons.template;\n\n    let minRange = heatLegend.valueAxis.axisRanges.create();\n    minRange.label.paddingTop = -15;\n\n    let maxRange = heatLegend.valueAxis.axisRanges.create();\n    maxRange.label.paddingTop = -15;\n\n    heatLegend.valueAxis.renderer.labels.template.adapter.add('text', () => (''));\n\n    polygonSeries.events.on('datavalidated', () => {\n      const min = heatLegend.series.dataItem.values.value.low;\n      minRange = heatLegend.valueAxis.axisRanges.getIndex(0);\n      minRange.value = min;\n      minRange.label.text = `${min}`;\n\n      const max = heatLegend.series.dataItem.values.value.high;\n      maxRange = heatLegend.valueAxis.axisRanges.getIndex(1);\n      maxRange.value = max;\n      maxRange.label.text = `${heatLegend.numberFormatter.format(max)}`;\n\n      minRange.label.fill = am4core.color(lightTextColor);\n      maxRange.label.fill = am4core.color(lightTextColor);\n\n      if (min === max) {\n        minRange.label.paddingRight = 300;\n        maxRange.label.paddingLeft = 300;\n      } else {\n        minRange.label.paddingRight = 45;\n        maxRange.label.paddingLeft = 45;\n      }\n    });\n\n    polygonTemplate.nonScalingStroke = true;\n    polygonTemplate.strokeWidth = 0.5;\n    polygonTemplate.fill = am4core.color('#f7f7f7');\n    polygonTemplate.stroke = am4core.color('#999999');\n\n    const tooltipFormatter = (target) => {\n      const { dataContext } = target.dataItem;\n      const textValue = dataContext.value >= 0 ? `${dataContext.value}` : '';\n      return `${t(`vector_map.countries.${dataContext['hc-key']}`)}\\n\n      Cases: ${textValue !== '' ? textValue : 0}\\n\n      Deaths: ${dataContext.deaths ? dataContext.deaths : 0}\\n\n      Recovered: ${dataContext.recovered ? dataContext.recovered : 0}`;\n    };\n\n    polygonSeries.data = mapData ? [...mapData] : [];\n    polygonTemplate.adapter.add('tooltipText', (text, target) => tooltipFormatter(target));\n    polygonSeries.tooltip.getFillFromObject = false;\n    polygonSeries.tooltip.background.fill = am4core.color(`${transparentize(0.2, '#FFF')}`);\n    polygonSeries.tooltip.label.fill = am4core.color('#000');\n\n    const handleHover = (mapPolygon) => {\n      // eslint-disable-next-line no-restricted-globals\n      if (!isNaN(mapPolygon.dataItem.value)) {\n        heatLegend.valueAxis.showTooltipAt(mapPolygon.dataItem.value);\n      } else {\n        heatLegend.valueAxis.hideTooltip();\n      }\n    };\n\n    polygonSeries.mapPolygons.template.events.on('over', (event) => {\n      handleHover(event.target);\n    });\n\n    polygonSeries.mapPolygons.template.events.on('hit', (event) => {\n      handleHover(event.target);\n    });\n\n    polygonSeries.mapPolygons.template.events.on('out', () => {\n      heatLegend.valueAxis.hideTooltip();\n    });\n\n    const hs = polygonTemplate.states.create('hover');\n    hs.properties.stroke = am4core.color(strokeColor);\n    hs.properties.strokeWidth = 2;\n    const zoomControl = new am4maps.ZoomControl();\n    zoomControl.align = 'left';\n    zoomControl.valign = 'middle';\n    map.zoomControl = zoomControl;\n  }, [t, mapData]);\n\n  return (\n    <Col md={12} lg={12}>\n      <Card>\n        <CardBody>\n          <div className=\"card__title\">\n            <h5 className=\"bold-text\">{t('maps.vector_map.vector_world_map')}</h5>\n          </div>\n          <div id=\"chartdiv\" style={{ width: '100%', height: '55vh' }} />\n        </CardBody>\n      </Card>\n    </Col>\n  );\n};\n\nMap.propTypes = {\n  mapData: PropTypes.arrayOf(PropTypes.shape()),\n};\n\nMap.defaultProps = {\n  mapData: [],\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}