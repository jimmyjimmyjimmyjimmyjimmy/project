{"ast":null,"code":"var _jsxFileName = \"/Users/WAVE/Documents/project/src/containers/Chat/components/Chat.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Scrollbar from 'react-smooth-scrollbar';\nimport classNames from 'classnames';\nimport { CurrentUserProps, ContactsProps } from '@/shared/prop-types/ChatProps';\nimport ChatContact from './ChatContact';\nimport ChatBubble from './ChatBubble';\nimport ChatSearch from './ChatSearch';\nimport ChatField from './ChatField';\nimport ChatTopbar from './ChatTopbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chat = ({\n  currentUser,\n  contacts\n}) => {\n  _s();\n\n  const [currentMessages, setCurrentMessages] = useState(contacts[0].messages);\n  const [currentChat, setCurrentChat] = useState(contacts[0].userName);\n  const [openContacts, setOpenContacts] = useState(false);\n  const chatClass = classNames({\n    chat: true,\n    'chat--open': openContacts\n  });\n  const contactsClass = classNames({\n    'chat__contact-list': true,\n    'chat__contact-list--open': openContacts\n  });\n\n  const onOpenChat = contact => {\n    const dialog = contacts.find(c => c.userName === contact).messages;\n    const messages = dialog || null;\n    setCurrentChat(contact);\n    setCurrentMessages(messages);\n  };\n\n  const onOpenContacts = () => {\n    setOpenContacts(!openContacts);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: chatClass,\n    onClick: openContacts ? onOpenContacts : null,\n    role: \"presentation\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: contactsClass,\n      children: [/*#__PURE__*/_jsxDEV(ChatSearch, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat__contacts\",\n        children: /*#__PURE__*/_jsxDEV(Scrollbar, {\n          className: \"scroll chat__contacts-scroll\",\n          alwaysShowTracks: true,\n          children: contacts.map(item => /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: e => onOpenChat(item.userName, e),\n            children: /*#__PURE__*/_jsxDEV(ChatContact, {\n              active: item.userName === currentChat,\n              contact: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, this)\n          }, item.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), currentChat === null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat__dialog\",\n      children: [/*#__PURE__*/_jsxDEV(ChatTopbar, {\n        onClick: onOpenContacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat__dialog-select-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a chat to start messaging\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat__dialog\",\n      children: [/*#__PURE__*/_jsxDEV(ChatTopbar, {\n        contact: contacts.find(item => item.userName === currentChat),\n        onClick: onOpenContacts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Scrollbar, {\n        className: \"scroll chat__scroll\",\n        alwaysShowTracks: true,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat__dialog-messages-wrap\",\n          children: currentMessages === null || currentMessages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat__dialog-messages\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat__dialog-messages-empty\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No messages\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 23\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat__dialog-messages\",\n            children: currentMessages.map(item => /*#__PURE__*/_jsxDEV(ChatBubble, {\n              contact: item.userName === currentUser.userName ? currentUser : contacts.find(c => c.userName === item.userName),\n              message: item,\n              date: item,\n              active: item.userName === currentUser.userName\n            }, item.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 25\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ChatField, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"acBEgzbrbYpzroQdn0toMNRms38=\");\n\n_c = Chat;\nChat.propTypes = {\n  currentUser: CurrentUserProps.isRequired,\n  contacts: ContactsProps.isRequired\n};\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/WAVE/Documents/project/src/containers/Chat/components/Chat.jsx"],"names":["React","useState","Scrollbar","classNames","CurrentUserProps","ContactsProps","ChatContact","ChatBubble","ChatSearch","ChatField","ChatTopbar","Chat","currentUser","contacts","currentMessages","setCurrentMessages","messages","currentChat","setCurrentChat","userName","openContacts","setOpenContacts","chatClass","chat","contactsClass","onOpenChat","contact","dialog","find","c","onOpenContacts","map","item","e","id","length","propTypes","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Scrollbar from 'react-smooth-scrollbar';\nimport classNames from 'classnames';\nimport { CurrentUserProps, ContactsProps } from '@/shared/prop-types/ChatProps';\nimport ChatContact from './ChatContact';\nimport ChatBubble from './ChatBubble';\nimport ChatSearch from './ChatSearch';\nimport ChatField from './ChatField';\nimport ChatTopbar from './ChatTopbar';\n\nconst Chat = ({ currentUser, contacts }) => {\n  const [currentMessages, setCurrentMessages] = useState(contacts[0].messages);\n  const [currentChat, setCurrentChat] = useState(contacts[0].userName);\n  const [openContacts, setOpenContacts] = useState(false);\n\n  const chatClass = classNames({\n    chat: true,\n    'chat--open': openContacts,\n  });\n\n  const contactsClass = classNames({\n    'chat__contact-list': true,\n    'chat__contact-list--open': openContacts,\n  });\n\n  const onOpenChat = (contact) => {\n    const dialog = contacts.find(c => c.userName === contact).messages;\n    const messages = dialog || null;\n    setCurrentChat(contact);\n    setCurrentMessages(messages);\n  };\n\n  const onOpenContacts = () => {\n    setOpenContacts(!openContacts);\n  };\n  return (\n    <div\n      className={chatClass}\n      onClick={openContacts ? onOpenContacts : null}\n      role=\"presentation\"\n    >\n      <div className={contactsClass}>\n        <ChatSearch />\n        <div className=\"chat__contacts\">\n          <Scrollbar className=\"scroll chat__contacts-scroll\" alwaysShowTracks>\n            {contacts.map(item => (\n              <button\n                key={item.id}\n                type=\"button\"\n                onClick={e => onOpenChat(item.userName, e)}\n              >\n                <ChatContact active={item.userName === currentChat} contact={item} />\n              </button>\n            ))}\n          </Scrollbar>\n        </div>\n      </div>\n      {currentChat === null\n        ? (\n          <div className=\"chat__dialog\">\n            <ChatTopbar onClick={onOpenContacts} />\n            <div className=\"chat__dialog-select-message\">\n              <p>Select a chat to start messaging</p>\n            </div>\n          </div>\n        ) : (\n          <div className=\"chat__dialog\">\n            <ChatTopbar\n              contact={contacts.find(item => item.userName === currentChat)}\n              onClick={onOpenContacts}\n            />\n            <Scrollbar className=\"scroll chat__scroll\" alwaysShowTracks>\n              <div className=\"chat__dialog-messages-wrap\">\n                {currentMessages === null || currentMessages.length === 0\n                  ? (\n                    <div className=\"chat__dialog-messages\">\n                      <div className=\"chat__dialog-messages-empty\">\n                        <p>No messages</p>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"chat__dialog-messages\">\n                      {currentMessages.map(item => (\n                        <ChatBubble\n                          key={item.id}\n                          contact={item.userName === currentUser.userName ? currentUser\n                            : contacts.find(c => c.userName === item.userName)}\n                          message={item}\n                          date={item}\n                          active={item.userName === currentUser.userName}\n                        />\n                      ))}\n                    </div>\n                  )}\n              </div>\n            </Scrollbar>\n            <ChatField />\n          </div>\n        )}\n    </div>\n  );\n};\n\nChat.propTypes = {\n  currentUser: CurrentUserProps.isRequired,\n  contacts: ContactsProps.isRequired,\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}