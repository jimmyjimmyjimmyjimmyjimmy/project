{"ast":null,"code":"var _jsxFileName = \"/Users/WAVE/Documents/project/src/containers/Tables/MaterialTable/components/MatTable.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MatTableHead from './MatTableHead';\nimport MatTableToolbar from './MatTableToolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet counter = 0;\n\nconst createData = (name, calories, fat, carbs, protein) => {\n  counter += 1;\n  return {\n    id: counter,\n    name,\n    calories,\n    fat,\n    carbs,\n    protein\n  };\n};\n\nconst getSorting = (order, orderBy) => {\n  if (order === 'desc') {\n    return (a, b) => {\n      if (a[orderBy] < b[orderBy]) {\n        return -1;\n      }\n\n      if (a[orderBy] > b[orderBy]) {\n        return 1;\n      }\n\n      return 0;\n    };\n  }\n\n  return (a, b) => {\n    if (a[orderBy] > b[orderBy]) {\n      return -1;\n    }\n\n    if (a[orderBy] < b[orderBy]) {\n      return 1;\n    }\n\n    return 0;\n  };\n};\n\nconst MatTable = () => {\n  _s();\n\n  const [order, setOrder] = useState('asc');\n  const [orderBy, setOrderBy] = useState('calories');\n  const [selected, setSelected] = useState(new Map([]));\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [data, setData] = useState([createData('Cupcake', 305, 3.7, 67, 4.3), createData('Donut', 452, 25.0, 51, 4.9), createData('Eclair', 262, 16.0, 24, 6.0), createData('Frozen yoghurt', 159, 6.0, 24, 4.0), createData('Gingerbread', 356, 16.0, 49, 3.9), createData('Honeycomb', 408, 3.2, 87, 6.5), createData('Ice cream sandwich', 237, 9.0, 37, 4.3), createData('Jelly Bean', 375, 0.0, 94, 0.0), createData('KitKat', 518, 26.0, 65, 7.0), createData('Lollipop', 392, 0.2, 98, 0.0), createData('Marshmallow', 318, 0, 81, 2.0), createData('Nougat', 360, 19.0, 9, 37.0), createData('Oreo', 437, 18.0, 63, 4.0)]);\n\n  const handleRequestSort = (event, property) => {\n    const orderByTemp = property;\n    let orderTemp = 'desc';\n\n    if (orderBy === property && order === 'desc') {\n      orderTemp = 'asc';\n    }\n\n    setOrder(orderTemp);\n    setOrderBy(orderByTemp);\n  };\n\n  const handleSelectAllClick = (event, checked) => {\n    if (checked) {\n      const newSelected = new Map();\n      data.map(n => newSelected.set(n.id, true));\n      setSelected(newSelected);\n      return;\n    }\n\n    setSelected(new Map([]));\n  };\n\n  const handleClick = (event, id) => {\n    const newSelected = new Map(selected);\n    const value = newSelected.get(id);\n    let isActive = true;\n\n    if (value) {\n      isActive = false;\n    }\n\n    newSelected.set(id, isActive);\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, item) => {\n    setPage(item);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(Number(event.target.value));\n    setPage(0);\n  };\n\n  const handleDeleteSelected = () => {\n    let copyData = [...data];\n\n    for (let i = 0; i < [...selected].filter(el => el[1]).length; i += 1) {\n      copyData = copyData.filter(obj => obj.id !== selected[i]);\n    }\n\n    setData(copyData);\n    setSelected(new Map([]));\n  };\n\n  const isSelected = id => !!selected.get(id);\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\n  return /*#__PURE__*/_jsxDEV(Col, {\n    md: 12,\n    lg: 12,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card__title\",\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"bold-text\",\n            children: \"Material table\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MatTableToolbar, {\n          numSelected: [...selected].filter(el => el[1]).length,\n          handleDeleteSelected: handleDeleteSelected,\n          onRequestSort: handleRequestSort\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"material-table__wrap\",\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            className: \"material-table\",\n            children: [/*#__PURE__*/_jsxDEV(MatTableHead, {\n              numSelected: [...selected].filter(el => el[1]).length,\n              order: order,\n              orderBy: orderBy,\n              onSelectAllClick: handleSelectAllClick,\n              onRequestSort: handleRequestSort,\n              rowCount: data.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: [data.sort(getSorting(order, orderBy)).slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(d => {\n                const select = isSelected(d.id);\n                return /*#__PURE__*/_jsxDEV(TableRow, {\n                  className: \"material-table__row\",\n                  role: \"checkbox\",\n                  onClick: event => handleClick(event, d.id),\n                  \"aria-checked\": select,\n                  tabIndex: -1,\n                  selected: select,\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    className: \"material-table__cell\",\n                    padding: \"checkbox\",\n                    children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                      checked: select,\n                      className: \"material-table__checkbox\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 155,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 154,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    className: \"material-table__cell material-table__cell-right\",\n                    component: \"th\",\n                    scope: \"row\",\n                    padding: \"none\",\n                    children: d.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 157,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    className: \"material-table__cell material-table__cell-right\",\n                    children: d.calories\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 165,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    className: \"material-table__cell material-table__cell-right\",\n                    children: d.fat\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 169,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    className: \"material-table__cell material-table__cell-right\",\n                    children: d.carbs\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 173,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    className: \"material-table__cell material-table__cell-right\",\n                    children: d.protein\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 25\n                  }, this)]\n                }, d.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 23\n                }, this);\n              }), emptyRows > 0 && /*#__PURE__*/_jsxDEV(TableRow, {\n                style: {\n                  height: 49 * emptyRows\n                },\n                children: /*#__PURE__*/_jsxDEV(TableCell, {\n                  colSpan: 6\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n          component: \"div\",\n          className: \"material-table__pagination\",\n          count: data.length,\n          rowsPerPage: rowsPerPage,\n          page: page,\n          backIconButtonProps: {\n            'aria-label': 'Previous Page'\n          },\n          nextIconButtonProps: {\n            'aria-label': 'Next Page'\n          },\n          onChangePage: handleChangePage,\n          onChangeRowsPerPage: handleChangeRowsPerPage,\n          rowsPerPageOptions: [5, 10, 15],\n          dir: \"ltr\",\n          SelectProps: {\n            inputProps: {\n              'aria-label': 'rows per page'\n            },\n            native: true\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MatTable, \"u6QI7S4kZvYBruO861KhZdc2+ng=\");\n\n_c = MatTable;\nexport default MatTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"MatTable\");","map":{"version":3,"sources":["/Users/WAVE/Documents/project/src/containers/Tables/MaterialTable/components/MatTable.jsx"],"names":["React","useState","Card","CardBody","Col","Table","TableBody","TableCell","TablePagination","TableRow","Checkbox","MatTableHead","MatTableToolbar","counter","createData","name","calories","fat","carbs","protein","id","getSorting","order","orderBy","a","b","MatTable","setOrder","setOrderBy","selected","setSelected","Map","page","setPage","rowsPerPage","setRowsPerPage","data","setData","handleRequestSort","event","property","orderByTemp","orderTemp","handleSelectAllClick","checked","newSelected","map","n","set","handleClick","value","get","isActive","handleChangePage","item","handleChangeRowsPerPage","Number","target","handleDeleteSelected","copyData","i","filter","el","length","obj","isSelected","emptyRows","Math","min","sort","slice","d","select","height","inputProps","native"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MatTableHead from './MatTableHead';\nimport MatTableToolbar from './MatTableToolbar';\n\nlet counter = 0;\n\nconst createData = (name, calories, fat, carbs, protein) => {\n  counter += 1;\n  return {\n    id: counter, name, calories, fat, carbs, protein,\n  };\n};\n\nconst getSorting = (order, orderBy) => {\n  if (order === 'desc') {\n    return (a, b) => {\n      if (a[orderBy] < b[orderBy]) {\n        return -1;\n      }\n      if (a[orderBy] > b[orderBy]) {\n        return 1;\n      }\n      return 0;\n    };\n  }\n  return (a, b) => {\n    if (a[orderBy] > b[orderBy]) {\n      return -1;\n    }\n    if (a[orderBy] < b[orderBy]) {\n      return 1;\n    }\n    return 0;\n  };\n};\n\nconst MatTable = () => {\n  const [order, setOrder] = useState('asc');\n  const [orderBy, setOrderBy] = useState('calories');\n  const [selected, setSelected] = useState(new Map([]));\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(5);\n  const [data, setData] = useState([\n    createData('Cupcake', 305, 3.7, 67, 4.3),\n    createData('Donut', 452, 25.0, 51, 4.9),\n    createData('Eclair', 262, 16.0, 24, 6.0),\n    createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\n    createData('Gingerbread', 356, 16.0, 49, 3.9),\n    createData('Honeycomb', 408, 3.2, 87, 6.5),\n    createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\n    createData('Jelly Bean', 375, 0.0, 94, 0.0),\n    createData('KitKat', 518, 26.0, 65, 7.0),\n    createData('Lollipop', 392, 0.2, 98, 0.0),\n    createData('Marshmallow', 318, 0, 81, 2.0),\n    createData('Nougat', 360, 19.0, 9, 37.0),\n    createData('Oreo', 437, 18.0, 63, 4.0),\n  ]);\n\n  const handleRequestSort = (event, property) => {\n    const orderByTemp = property;\n    let orderTemp = 'desc';\n    if (orderBy === property && order === 'desc') { orderTemp = 'asc'; }\n    setOrder(orderTemp);\n    setOrderBy(orderByTemp);\n  };\n\n  const handleSelectAllClick = (event, checked) => {\n    if (checked) {\n      const newSelected = new Map();\n      data.map(n => newSelected.set(n.id, true));\n      setSelected(newSelected);\n      return;\n    }\n    setSelected(new Map([]));\n  };\n\n  const handleClick = (event, id) => {\n    const newSelected = new Map(selected);\n    const value = newSelected.get(id);\n    let isActive = true;\n    if (value) {\n      isActive = false;\n    }\n    newSelected.set(id, isActive);\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, item) => {\n    setPage(item);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(Number(event.target.value));\n    setPage(0);\n  };\n\n  const handleDeleteSelected = () => {\n    let copyData = [...data];\n    for (let i = 0; i < [...selected].filter(el => el[1]).length; i += 1) {\n      copyData = copyData.filter(obj => obj.id !== selected[i]);\n    }\n    setData(copyData);\n    setSelected(new Map([]));\n  };\n\n  const isSelected = id => !!selected.get(id);\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - (page * rowsPerPage));\n\n  return (\n    <Col md={12} lg={12}>\n      <Card>\n        <CardBody>\n          <div className=\"card__title\">\n            <h5 className=\"bold-text\">Material table</h5>\n          </div>\n          <MatTableToolbar\n            numSelected={[...selected].filter(el => el[1]).length}\n            handleDeleteSelected={handleDeleteSelected}\n            onRequestSort={handleRequestSort}\n          />\n          <div className=\"material-table__wrap\">\n            <Table className=\"material-table\">\n              <MatTableHead\n                numSelected={[...selected].filter(el => el[1]).length}\n                order={order}\n                orderBy={orderBy}\n                onSelectAllClick={handleSelectAllClick}\n                onRequestSort={handleRequestSort}\n                rowCount={data.length}\n              />\n              <TableBody>\n                {data\n                  .sort(getSorting(order, orderBy))\n                  .slice(page * rowsPerPage, (page * rowsPerPage) + rowsPerPage)\n                  .map((d) => {\n                    const select = isSelected(d.id);\n                    return (\n                      <TableRow\n                        className=\"material-table__row\"\n                        role=\"checkbox\"\n                        onClick={event => handleClick(event, d.id)}\n                        aria-checked={select}\n                        tabIndex={-1}\n                        key={d.id}\n                        selected={select}\n                      >\n                        <TableCell className=\"material-table__cell\" padding=\"checkbox\">\n                          <Checkbox checked={select} className=\"material-table__checkbox\" />\n                        </TableCell>\n                        <TableCell\n                          className=\"material-table__cell material-table__cell-right\"\n                          component=\"th\"\n                          scope=\"row\"\n                          padding=\"none\"\n                        >\n                          {d.name}\n                        </TableCell>\n                        <TableCell\n                          className=\"material-table__cell material-table__cell-right\"\n                        >{d.calories}\n                        </TableCell>\n                        <TableCell\n                          className=\"material-table__cell material-table__cell-right\"\n                        >{d.fat}\n                        </TableCell>\n                        <TableCell\n                          className=\"material-table__cell material-table__cell-right\"\n                        >{d.carbs}\n                        </TableCell>\n                        <TableCell\n                          className=\"material-table__cell material-table__cell-right\"\n                        >{d.protein}\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                {emptyRows > 0 && (\n                  <TableRow style={{ height: 49 * emptyRows }}>\n                    <TableCell colSpan={6} />\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n          <TablePagination\n            component=\"div\"\n            className=\"material-table__pagination\"\n            count={data.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            backIconButtonProps={{ 'aria-label': 'Previous Page' }}\n            nextIconButtonProps={{ 'aria-label': 'Next Page' }}\n            onChangePage={handleChangePage}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n            rowsPerPageOptions={[5, 10, 15]}\n            dir=\"ltr\"\n            SelectProps={{\n              inputProps: { 'aria-label': 'rows per page' },\n              native: true,\n            }}\n          />\n        </CardBody>\n      </Card>\n    </Col>\n  );\n};\n\nexport default MatTable;\n"]},"metadata":{},"sourceType":"module"}