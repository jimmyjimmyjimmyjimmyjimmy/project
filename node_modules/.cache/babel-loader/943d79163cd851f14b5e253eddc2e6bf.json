{"ast":null,"code":"var _jsxFileName = \"/Users/WAVE/Documents/project/src/containers/Charts/ChartJs/components/DynamicallyRefreshedDoughnut.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport { Doughnut } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nconst getState = () => ({\n  labels: ['Red', 'Blue', 'Yellow'],\n  datasets: [{\n    data: [getRandomInt(50, 200), getRandomInt(100, 150), getRandomInt(150, 250)],\n    backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],\n    hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],\n    borderColor: 'rgba(255,255,255,0.54)'\n  }]\n});\n\nconst DynamicallyRefreshedDoughnut = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation('common');\n  const [data, setData] = useState(getState());\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setData(getState());\n    }, 4000);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Col, {\n    md: 12,\n    lg: 12,\n    xl: 6,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card__title\",\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"bold-text\",\n            children: t('charts.react_chartjs.dynamically_refreshed_doughnut')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Doughnut, {\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DynamicallyRefreshedDoughnut, \"FETiqFULFHieEdNEokuvcvxZuRI=\", false, function () {\n  return [useTranslation];\n});\n\n_c = DynamicallyRefreshedDoughnut;\nexport default DynamicallyRefreshedDoughnut;\n\nvar _c;\n\n$RefreshReg$(_c, \"DynamicallyRefreshedDoughnut\");","map":{"version":3,"sources":["/Users/WAVE/Documents/project/src/containers/Charts/ChartJs/components/DynamicallyRefreshedDoughnut.jsx"],"names":["React","useEffect","useState","useTranslation","Card","CardBody","Col","Doughnut","getRandomInt","min","max","Math","floor","random","getState","labels","datasets","data","backgroundColor","hoverBackgroundColor","borderColor","DynamicallyRefreshedDoughnut","t","setData","intervalId","setInterval","clearInterval"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,GAAzB,QAAoC,YAApC;AACA,SAASC,QAAT,QAAyB,iBAAzB;;;AAEA,MAAMC,YAAY,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAcC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAkBH,GAAG,GAAGD,GAAP,GAAc,CAA/B,CAAX,IAAgDA,GAAnF;;AAEA,MAAMK,QAAQ,GAAG,OAAO;AACtBC,EAAAA,MAAM,EAAE,CACN,KADM,EAEN,MAFM,EAGN,QAHM,CADc;AAMtBC,EAAAA,QAAQ,EAAE,CAAC;AACTC,IAAAA,IAAI,EAAE,CAACT,YAAY,CAAC,EAAD,EAAK,GAAL,CAAb,EAAwBA,YAAY,CAAC,GAAD,EAAM,GAAN,CAApC,EAAgDA,YAAY,CAAC,GAAD,EAAM,GAAN,CAA5D,CADG;AAETU,IAAAA,eAAe,EAAE,CACf,SADe,EAEf,SAFe,EAGf,SAHe,CAFR;AAOTC,IAAAA,oBAAoB,EAAE,CACpB,SADoB,EAEpB,SAFoB,EAGpB,SAHoB,CAPb;AAYTC,IAAAA,WAAW,EAAE;AAZJ,GAAD;AANY,CAAP,CAAjB;;AAsBA,MAAMC,4BAA4B,GAAG,MAAM;AAAA;;AACzC,QAAM;AAAEC,IAAAA;AAAF,MAAQnB,cAAc,CAAC,QAAD,CAA5B;AACA,QAAM,CAACc,IAAD,EAAOM,OAAP,IAAkBrB,QAAQ,CAACY,QAAQ,EAAT,CAAhC;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuB,UAAU,GAAGC,WAAW,CAAC,MAAM;AACnCF,MAAAA,OAAO,CAACT,QAAQ,EAAT,CAAP;AACD,KAF6B,EAE3B,IAF2B,CAA9B;AAGA,WAAQ,MAAM;AACZY,MAAAA,aAAa,CAACF,UAAD,CAAb;AACD,KAFD;AAGD,GAPQ,EAON,EAPM,CAAT;AASA,sBACE,QAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAa,IAAA,EAAE,EAAE,EAAjB;AAAqB,IAAA,EAAE,EAAE,CAAzB;AAAA,2BACE,QAAC,IAAD;AAAA,6BACE,QAAC,QAAD;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,iCACE;AAAI,YAAA,SAAS,EAAC,WAAd;AAAA,sBAA2BF,CAAC,CAAC,qDAAD;AAA5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,QAAD;AAAU,UAAA,IAAI,EAAEL;AAAhB;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAzBD;;GAAMI,4B;UACUlB,c;;;KADVkB,4B;AA2BN,eAAeA,4BAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport { Doughnut } from 'react-chartjs-2';\n\nconst getRandomInt = (min, max) => Math.floor(Math.random() * ((max - min) + 1)) + min;\n\nconst getState = () => ({\n  labels: [\n    'Red',\n    'Blue',\n    'Yellow',\n  ],\n  datasets: [{\n    data: [getRandomInt(50, 200), getRandomInt(100, 150), getRandomInt(150, 250)],\n    backgroundColor: [\n      '#FF6384',\n      '#36A2EB',\n      '#FFCE56',\n    ],\n    hoverBackgroundColor: [\n      '#FF6384',\n      '#36A2EB',\n      '#FFCE56',\n    ],\n    borderColor: 'rgba(255,255,255,0.54)',\n  }],\n});\n\nconst DynamicallyRefreshedDoughnut = () => {\n  const { t } = useTranslation('common');\n  const [data, setData] = useState(getState());\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setData(getState());\n    }, 4000);\n    return (() => {\n      clearInterval(intervalId);\n    });\n  }, []);\n\n  return (\n    <Col md={12} lg={12} xl={6}>\n      <Card>\n        <CardBody>\n          <div className=\"card__title\">\n            <h5 className=\"bold-text\">{t('charts.react_chartjs.dynamically_refreshed_doughnut')}</h5>\n          </div>\n          <Doughnut data={data} />\n        </CardBody>\n      </Card>\n    </Col>\n  );\n};\n\nexport default DynamicallyRefreshedDoughnut;\n"]},"metadata":{},"sourceType":"module"}