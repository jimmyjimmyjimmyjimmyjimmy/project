{"ast":null,"code":"var _jsxFileName = \"/Users/WAVE/Documents/project/src/containers/DiscoverParks/components/ParkSelect.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst skills = ['Angular', 'CSS', 'Graphic Design', 'Ember', 'HTML', 'Information Architecture', 'JavaScript', 'Mechanical Engineering', 'Meteor', 'NodeJS', 'Plumbing', 'Python', 'Rails', 'React', 'Kitchen Repair', 'Ruby', 'UI Design', 'User Experience'];\n\nfunction App() {\n  _s();\n\n  const [selectedSkill, setSelectedSkill] = useState('');\n  const [dropdownSearchValue, setDropdownSearchValue] = useState('');\n  const [editMode, setEditMode] = useState(false);\n  const dropdownRef = useRef();\n  /**\n   * Close the dropdown when clicked outside\n   * Refer https://www.codingdeft.com/posts/react-on-click-outside/ for details\n   */\n\n  useEffect(() => {\n    const checkIfClickedOutside = e => {\n      //eslint-disable-line\n      // If the menu is open and the clicked target is not within the menu,\n      // then close the menu\n      if (editMode && dropdownRef.current && !dropdownRef.current.contains(e.target)) {\n        setEditMode(false);\n      }\n    };\n\n    document.addEventListener('mousedown', checkIfClickedOutside);\n    return () => {\n      // Cleanup the event listener\n      document.removeEventListener('mousedown', checkIfClickedOutside);\n    };\n  }, [editMode]);\n\n  const skillSelectionHandler = skill => {\n    //eslint-disable-line\n    setSelectedSkill(skill);\n    setDropdownSearchValue('');\n    setEditMode(false);\n  };\n\n  const filteredSkills = skills.filter(skill => skill.match(new RegExp(dropdownSearchValue, \"i\")));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Dropdown filtering\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), editMode ?\n    /*#__PURE__*/\n    // display the dropdown when the input us focused\n    _jsxDEV(\"div\", {\n      ref: dropdownRef,\n      className: \"dropdown-wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"dropdown-input\",\n        name: \"dropdown-input\",\n        autoFocus: true,\n        onChange: e => setDropdownSearchValue(e.target.value),\n        value: dropdownSearchValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [filteredSkills.map(skill => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              onClick: () => skillSelectionHandler(skill),\n              children: [skill, \" \"]\n            }, skill, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 19\n            }, this);\n          }), filteredSkills.length === 0 && /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"no-result\",\n            children: \"No results found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n      // Grey out the text when \"Select Primary skill\" input hint is shown\n      className: `dropdown-search ${!(dropdownSearchValue || selectedSkill) && \"default\"}`,\n      onFocus: () => setEditMode(true) // Display the selected skill or \"Select Primary skill\" input hint\n      ,\n      value: selectedSkill || \"Select Primary skill\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"CtZ5RPDHdg4l+KASsj9ZU2AGI4E=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/WAVE/Documents/project/src/containers/DiscoverParks/components/ParkSelect.jsx"],"names":["React","useEffect","useRef","useState","skills","App","selectedSkill","setSelectedSkill","dropdownSearchValue","setDropdownSearchValue","editMode","setEditMode","dropdownRef","checkIfClickedOutside","e","current","contains","target","document","addEventListener","removeEventListener","skillSelectionHandler","skill","filteredSkills","filter","match","RegExp","value","map","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst skills = [\n  'Angular',\n  'CSS',\n  'Graphic Design',\n  'Ember',\n  'HTML',\n  'Information Architecture',\n  'JavaScript',\n  'Mechanical Engineering',\n  'Meteor',\n  'NodeJS',\n  'Plumbing',\n  'Python',\n  'Rails',\n  'React',\n  'Kitchen Repair',\n  'Ruby',\n  'UI Design',\n  'User Experience',\n];\n\nfunction App() {\n  const [selectedSkill, setSelectedSkill] = useState('');\n  const [dropdownSearchValue, setDropdownSearchValue] = useState('');\n  const [editMode, setEditMode] = useState(false);\n  const dropdownRef = useRef();\n\n  /**\n   * Close the dropdown when clicked outside\n   * Refer https://www.codingdeft.com/posts/react-on-click-outside/ for details\n   */\n  useEffect(() => {\n    const checkIfClickedOutside = e => { //eslint-disable-line\n      // If the menu is open and the clicked target is not within the menu,\n      // then close the menu\n      if (\n        editMode \n        && dropdownRef.current \n        && !dropdownRef.current.contains(e.target)\n      ) {\n        setEditMode(false);\n      }\n    };\n    document.addEventListener('mousedown', checkIfClickedOutside);\n    return () => {\n      // Cleanup the event listener\n      document.removeEventListener('mousedown', checkIfClickedOutside);\n    };\n  }, [editMode]);\n\n  const skillSelectionHandler = skill => { //eslint-disable-line\n    setSelectedSkill(skill)\n    setDropdownSearchValue('')\n    setEditMode(false)\n  }\n\n  const filteredSkills = skills.filter(skill =>\n    skill.match(new RegExp(dropdownSearchValue, \"i\"))\n  )\n\n  return (\n    <div className=\"App\">\n      <h2>Dropdown filtering</h2>\n\n      {editMode ? (\n        // display the dropdown when the input us focused\n        <div ref={dropdownRef} className=\"dropdown-wrapper\">\n          <input\n            className=\"dropdown-input\"\n            name=\"dropdown-input\"\n            autoFocus\n            onChange={e => setDropdownSearchValue(e.target.value)}\n            value={dropdownSearchValue}\n          />\n          <div className=\"dropdown-list\">\n            <ul>\n              {filteredSkills.map(skill => {\n                return (\n                  <li key={skill} onClick={() => skillSelectionHandler(skill)}>\n                    {skill}{\" \"}\n                  </li>\n                )\n              })}\n              {filteredSkills.length === 0 && (\n                <li className=\"no-result\">No results found</li>\n              )}\n            </ul>\n          </div>\n        </div>\n      ) : (\n        <input\n          // Grey out the text when \"Select Primary skill\" input hint is shown\n          className={`dropdown-search ${\n            !(dropdownSearchValue || selectedSkill) && \"default\"\n          }`}\n          onFocus={() => setEditMode(true)}\n          // Display the selected skill or \"Select Primary skill\" input hint\n          value={selectedSkill || \"Select Primary skill\"}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}