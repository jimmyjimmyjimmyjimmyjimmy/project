{"ast":null,"code":"var _jsxFileName = \"/Users/WAVE/Documents/project/src/containers/Account/Profile/components/ProfileTasks.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport { editTodoElement, fetchTodoListData } from '../../../Todo/redux/actions';\nimport todoCard from '../../../Todo/types';\nimport ProfileToDo from './ProfileTodo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst editTodoElementData = ({\n  todoElements,\n  editTodoElementAction\n}) => e => {\n  const todoId = e.target.id;\n  const elementData = todoElements.find(item => Number(item.data.id) === Number(todoId)).data;\n  elementData.isCompleted = !elementData.isCompleted;\n  editTodoElementAction(elementData);\n};\n\nconst ProfileTasks = ({\n  todoElements,\n  fetchTodoListDataAction,\n  editTodoElementAction\n}) => {\n  _s();\n\n  const [noArchivedTodoElements, setNoArchivedTodoElements] = useState(null);\n  const [archivedTodoElements, setArchivedTodoElements] = useState(null);\n  const [prevTodoElements, setPrevTodoElements] = useState(null);\n  useEffect(() => {\n    if (JSON.stringify(todoElements) !== JSON.stringify(prevTodoElements)) {\n      if (todoElements.length === 0 && prevTodoElements === null) {\n        // You can delete it if you need\n        fetchTodoListDataAction();\n      }\n\n      const filteredData = [...todoElements];\n      setNoArchivedTodoElements(filteredData.filter(item => !item.data.isArchived));\n      setArchivedTodoElements(filteredData.filter(item => item.data.isArchived));\n      setPrevTodoElements([...todoElements]);\n    }\n  }, [todoElements, fetchTodoListDataAction, prevTodoElements]);\n  return /*#__PURE__*/_jsxDEV(Col, {\n    md: 12,\n    lg: 12,\n    xl: 12,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        className: \"profile__card\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"profile__current-tasks-title\",\n          children: [\"Current tasks \", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: todoElements.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 69\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profile__current-tasks\",\n          children: [noArchivedTodoElements && noArchivedTodoElements.map(element => /*#__PURE__*/_jsxDEV(ProfileToDo, {\n            id: element.data.id,\n            label: element.data.title,\n            checked: element.data.isCompleted,\n            onChange: editTodoElementData({\n              todoElements,\n              editTodoElementAction\n            })\n          }, element.data.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this)), archivedTodoElements && archivedTodoElements.map(element => /*#__PURE__*/_jsxDEV(ProfileToDo, {\n            id: element.data.id,\n            label: element.data.title,\n            checked: element.data.isCompleted,\n            disabled: true\n          }, element.data.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/todo\",\n            className: \"profile__see-all-tasks\",\n            children: \"See all tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProfileTasks, \"6AlG5cr0sIz/dcR9XSMauT8bXKE=\");\n\n_c = ProfileTasks;\nProfileTasks.propTypes = {\n  fetchTodoListDataAction: PropTypes.func,\n  editTodoElementAction: PropTypes.func,\n  todoElements: PropTypes.arrayOf(todoCard).isRequired\n};\nProfileTasks.defaultProps = {\n  fetchTodoListDataAction: () => {},\n  editTodoElementAction: () => {}\n};\n\nconst mapStateToProps = state => {\n  const todoElements = state.todo && state.todo.data && state.todo.data.elements && state.todo.data.elements.length > 0 ? [...state.todo.data.elements] : [];\n  return {\n    todoElements\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchTodoListDataAction: fetchTodoListData,\n  editTodoElementAction: editTodoElement\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileTasks);\n\nvar _c;\n\n$RefreshReg$(_c, \"ProfileTasks\");","map":{"version":3,"sources":["/Users/WAVE/Documents/project/src/containers/Account/Profile/components/ProfileTasks.jsx"],"names":["React","useEffect","useState","PropTypes","connect","Link","Card","CardBody","Col","editTodoElement","fetchTodoListData","todoCard","ProfileToDo","editTodoElementData","todoElements","editTodoElementAction","e","todoId","target","id","elementData","find","item","Number","data","isCompleted","ProfileTasks","fetchTodoListDataAction","noArchivedTodoElements","setNoArchivedTodoElements","archivedTodoElements","setArchivedTodoElements","prevTodoElements","setPrevTodoElements","JSON","stringify","length","filteredData","filter","isArchived","map","element","title","propTypes","func","arrayOf","isRequired","defaultProps","mapStateToProps","state","todo","elements","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport {\n  Card, CardBody, Col,\n} from 'reactstrap';\nimport { editTodoElement, fetchTodoListData } from '../../../Todo/redux/actions';\nimport todoCard from '../../../Todo/types';\nimport ProfileToDo from './ProfileTodo';\n\nconst editTodoElementData = ({ todoElements, editTodoElementAction }) => (e) => {\n  const todoId = e.target.id;\n  const elementData = todoElements.find(item => Number(item.data.id) === Number(todoId)).data;\n  elementData.isCompleted = !elementData.isCompleted;\n  editTodoElementAction(elementData);\n};\n\nconst ProfileTasks = ({ todoElements, fetchTodoListDataAction, editTodoElementAction }) => {\n  const [noArchivedTodoElements, setNoArchivedTodoElements] = useState(null);\n  const [archivedTodoElements, setArchivedTodoElements] = useState(null);\n  const [prevTodoElements, setPrevTodoElements] = useState(null);\n\n  useEffect(() => {\n    if (JSON.stringify(todoElements) !== JSON.stringify(prevTodoElements)) {\n      if (todoElements.length === 0 && prevTodoElements === null) { // You can delete it if you need\n        fetchTodoListDataAction();\n      }\n      const filteredData = [...todoElements];\n      setNoArchivedTodoElements(filteredData.filter(item => !item.data.isArchived));\n      setArchivedTodoElements(filteredData.filter(item => item.data.isArchived));\n      setPrevTodoElements([...todoElements]);\n    }\n  }, [todoElements, fetchTodoListDataAction, prevTodoElements]);\n\n  return (\n    <Col md={12} lg={12} xl={12}>\n      <Card>\n        <CardBody className=\"profile__card\">\n          <p className=\"profile__current-tasks-title\">Current tasks <span>{todoElements.length}</span></p>\n          <div className=\"profile__current-tasks\">\n            {noArchivedTodoElements && noArchivedTodoElements.map(element => (\n              <ProfileToDo\n                key={element.data.id}\n                id={element.data.id}\n                label={element.data.title}\n                checked={element.data.isCompleted}\n                onChange={editTodoElementData({ todoElements, editTodoElementAction })}\n              />\n            ))}\n            {archivedTodoElements && archivedTodoElements.map(element => (\n              <ProfileToDo\n                key={element.data.id}\n                id={element.data.id}\n                label={element.data.title}\n                checked={element.data.isCompleted}\n                disabled\n              />\n            ))}\n            <Link to=\"/todo\" className=\"profile__see-all-tasks\">See all tasks</Link>\n          </div>\n        </CardBody>\n      </Card>\n    </Col>\n  );\n};\n\nProfileTasks.propTypes = {\n  fetchTodoListDataAction: PropTypes.func,\n  editTodoElementAction: PropTypes.func,\n  todoElements: PropTypes.arrayOf(todoCard).isRequired,\n};\n\nProfileTasks.defaultProps = {\n  fetchTodoListDataAction: () => {},\n  editTodoElementAction: () => {},\n};\n\nconst mapStateToProps = (state) => {\n  const todoElements = state.todo && state.todo.data && state.todo.data.elements\n  && state.todo.data.elements.length > 0 ? [...state.todo.data.elements] : [];\n  return ({\n    todoElements,\n  });\n};\n\nconst mapDispatchToProps = {\n  fetchTodoListDataAction: fetchTodoListData,\n  editTodoElementAction: editTodoElement,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileTasks);\n"]},"metadata":{},"sourceType":"module"}