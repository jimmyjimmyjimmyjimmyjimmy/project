{"ast":null,"code":"var _jsxFileName = \"/Users/WAVE/Documents/project/src/shared/components/Alert.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Button } from 'reactstrap';\nimport InformationOutlineIcon from 'mdi-react/InformationOutlineIcon';\nimport ThumbUpOutlineIcon from 'mdi-react/ThumbUpOutlineIcon';\nimport CommentAlertOutlineIcon from 'mdi-react/CommentAlertOutlineIcon';\nimport CloseCircleOutlineIcon from 'mdi-react/CloseCircleOutlineIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AlertComponent = ({\n  color,\n  className,\n  icon,\n  children\n}) => {\n  _s();\n\n  const [visible, setVisible] = useState(true);\n\n  const onShow = () => {\n    setVisible(true);\n  };\n\n  const onDismiss = () => {\n    setVisible(false);\n  };\n\n  let Icon;\n\n  switch (color) {\n    case 'info':\n      Icon = /*#__PURE__*/_jsxDEV(InformationOutlineIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 14\n      }, this);\n      break;\n\n    case 'success':\n      Icon = /*#__PURE__*/_jsxDEV(ThumbUpOutlineIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 14\n      }, this);\n      break;\n\n    case 'warning':\n      Icon = /*#__PURE__*/_jsxDEV(CommentAlertOutlineIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 14\n      }, this);\n      break;\n\n    case 'danger':\n      Icon = /*#__PURE__*/_jsxDEV(CloseCircleOutlineIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 14\n      }, this);\n      break;\n\n    default:\n      console.log('Wrong color!');\n      break;\n  }\n\n  if (visible) {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      color: color,\n      className: className,\n      isOpen: visible,\n      children: [icon && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert__icon\",\n        children: Icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"close\",\n        type: \"button\",\n        onClick: onDismiss,\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"lnr lnr-cross\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert__content\",\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: onShow,\n    children: \"Show Alert\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AlertComponent, \"p/lRV+JGew4KJq1vCTMMXt6g6IM=\");\n\n_c = AlertComponent;\nexport default AlertComponent;\nAlertComponent.propTypes = {\n  color: PropTypes.string,\n  icon: PropTypes.bool,\n  className: PropTypes.string,\n  children: PropTypes.node.isRequired\n};\nAlertComponent.defaultProps = {\n  color: '',\n  icon: false,\n  className: ''\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"AlertComponent\");","map":{"version":3,"sources":["/Users/WAVE/Documents/project/src/shared/components/Alert.jsx"],"names":["React","useState","PropTypes","Alert","Button","InformationOutlineIcon","ThumbUpOutlineIcon","CommentAlertOutlineIcon","CloseCircleOutlineIcon","AlertComponent","color","className","icon","children","visible","setVisible","onShow","onDismiss","Icon","console","log","propTypes","string","bool","node","isRequired","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,YAA9B;AACA,OAAOC,sBAAP,MAAmC,kCAAnC;AACA,OAAOC,kBAAP,MAA+B,8BAA/B;AACA,OAAOC,uBAAP,MAAoC,mCAApC;AACA,OAAOC,sBAAP,MAAmC,kCAAnC;;;AAEA,MAAMC,cAAc,GAAG,CAAC;AACtBC,EAAAA,KADsB;AACfC,EAAAA,SADe;AACJC,EAAAA,IADI;AACEC,EAAAA;AADF,CAAD,KAEjB;AAAA;;AACJ,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,IAAD,CAAtC;;AAEA,QAAMe,MAAM,GAAG,MAAM;AACnBD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GAFD;;AAIA,QAAME,SAAS,GAAG,MAAM;AACtBF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAFD;;AAIA,MAAIG,IAAJ;;AAEA,UAAQR,KAAR;AACE,SAAK,MAAL;AACEQ,MAAAA,IAAI,gBAAG,QAAC,sBAAD;AAAA;AAAA;AAAA;AAAA,cAAP;AACA;;AACF,SAAK,SAAL;AACEA,MAAAA,IAAI,gBAAG,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,cAAP;AACA;;AACF,SAAK,SAAL;AACEA,MAAAA,IAAI,gBAAG,QAAC,uBAAD;AAAA;AAAA;AAAA;AAAA,cAAP;AACA;;AACF,SAAK,QAAL;AACEA,MAAAA,IAAI,gBAAG,QAAC,sBAAD;AAAA;AAAA;AAAA;AAAA,cAAP;AACA;;AACF;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA;AAfJ;;AAkBA,MAAIN,OAAJ,EAAa;AACX,wBACE,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEJ,KAAd;AAAqB,MAAA,SAAS,EAAEC,SAAhC;AAA2C,MAAA,MAAM,EAAEG,OAAnD;AAAA,iBACGF,IAAI,iBAAI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,kBAA8BM;AAA9B;AAAA;AAAA;AAAA;AAAA,cADX,eAEE;AAAQ,QAAA,SAAS,EAAC,OAAlB;AAA0B,QAAA,IAAI,EAAC,QAA/B;AAAwC,QAAA,OAAO,EAAED,SAAjD;AAAA,+BACE;AAAM,UAAA,SAAS,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF,eAKE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,kBAAiCJ;AAAjC;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AAED,sBAAO,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAEG,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA9CD;;GAAMP,c;;KAAAA,c;AAgDN,eAAeA,cAAf;AAEAA,cAAc,CAACY,SAAf,GAA2B;AACzBX,EAAAA,KAAK,EAAER,SAAS,CAACoB,MADQ;AAEzBV,EAAAA,IAAI,EAAEV,SAAS,CAACqB,IAFS;AAGzBZ,EAAAA,SAAS,EAAET,SAAS,CAACoB,MAHI;AAIzBT,EAAAA,QAAQ,EAAEX,SAAS,CAACsB,IAAV,CAAeC;AAJA,CAA3B;AAOAhB,cAAc,CAACiB,YAAf,GAA8B;AAC5BhB,EAAAA,KAAK,EAAE,EADqB;AAE5BE,EAAAA,IAAI,EAAE,KAFsB;AAG5BD,EAAAA,SAAS,EAAE;AAHiB,CAA9B","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Alert, Button } from 'reactstrap';\nimport InformationOutlineIcon from 'mdi-react/InformationOutlineIcon';\nimport ThumbUpOutlineIcon from 'mdi-react/ThumbUpOutlineIcon';\nimport CommentAlertOutlineIcon from 'mdi-react/CommentAlertOutlineIcon';\nimport CloseCircleOutlineIcon from 'mdi-react/CloseCircleOutlineIcon';\n\nconst AlertComponent = ({\n  color, className, icon, children,\n}) => {\n  const [visible, setVisible] = useState(true);\n\n  const onShow = () => {\n    setVisible(true);\n  };\n\n  const onDismiss = () => {\n    setVisible(false);\n  };\n\n  let Icon;\n\n  switch (color) {\n    case 'info':\n      Icon = <InformationOutlineIcon />;\n      break;\n    case 'success':\n      Icon = <ThumbUpOutlineIcon />;\n      break;\n    case 'warning':\n      Icon = <CommentAlertOutlineIcon />;\n      break;\n    case 'danger':\n      Icon = <CloseCircleOutlineIcon />;\n      break;\n    default:\n      console.log('Wrong color!');\n      break;\n  }\n\n  if (visible) {\n    return (\n      <Alert color={color} className={className} isOpen={visible}>\n        {icon && <div className=\"alert__icon\">{Icon}</div>}\n        <button className=\"close\" type=\"button\" onClick={onDismiss}>\n          <span className=\"lnr lnr-cross\" />\n        </button>\n        <div className=\"alert__content\">{children}</div>\n      </Alert>\n    );\n  }\n\n  return <Button onClick={onShow}>Show Alert</Button>;\n};\n\nexport default AlertComponent;\n\nAlertComponent.propTypes = {\n  color: PropTypes.string,\n  icon: PropTypes.bool,\n  className: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nAlertComponent.defaultProps = {\n  color: '',\n  icon: false,\n  className: '',\n};\n"]},"metadata":{},"sourceType":"module"}