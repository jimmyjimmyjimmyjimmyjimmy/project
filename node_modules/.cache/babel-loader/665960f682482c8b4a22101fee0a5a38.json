{"ast":null,"code":"var _jsxFileName = \"/Users/WAVE/Documents/project/src/containers/Charts/ChartJs/components/RandomAnimatedBars.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getRandomData = () => new Array(7).fill(0).map(() => Math.floor(Math.random() * 100));\n\nconst getState = () => ({\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [{\n    label: 'My First dataset',\n    backgroundColor: '#FF6384',\n    borderColor: '#FF6384',\n    borderWidth: 1,\n    hoverBackgroundColor: '#FF6384',\n    hoverBorderColor: '#FF6384',\n    data: getRandomData()\n  }]\n});\n\nconst options = {\n  legend: {\n    position: 'bottom'\n  },\n  scales: {\n    xAxes: [{\n      gridLines: {\n        color: 'rgb(204, 204, 204)',\n        borderDash: [3, 3]\n      },\n      ticks: {\n        fontColor: 'rgb(204, 204, 204)'\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        color: 'rgb(204, 204, 204)',\n        borderDash: [3, 3]\n      },\n      ticks: {\n        fontColor: 'rgb(204, 204, 204)'\n      }\n    }]\n  }\n};\n\nconst RandomAnimatedBars = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation('common');\n  const [data, setData] = useState(getState());\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setData(getState());\n    }, 4000);\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Col, {\n    md: 12,\n    lg: 12,\n    xl: 6,\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card__title\",\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"bold-text\",\n            children: t('charts.react_chartjs.random_animated_bars')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          data: data,\n          options: options\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RandomAnimatedBars, \"FETiqFULFHieEdNEokuvcvxZuRI=\", false, function () {\n  return [useTranslation];\n});\n\n_c = RandomAnimatedBars;\nexport default RandomAnimatedBars;\n\nvar _c;\n\n$RefreshReg$(_c, \"RandomAnimatedBars\");","map":{"version":3,"sources":["/Users/WAVE/Documents/project/src/containers/Charts/ChartJs/components/RandomAnimatedBars.jsx"],"names":["React","useEffect","useState","useTranslation","Card","CardBody","Col","Bar","getRandomData","Array","fill","map","Math","floor","random","getState","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","data","options","legend","position","scales","xAxes","gridLines","color","borderDash","ticks","fontColor","yAxes","RandomAnimatedBars","t","setData","intervalId","setInterval","clearInterval"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,GAAzB,QAAoC,YAApC;AACA,SAASC,GAAT,QAAoB,iBAApB;;;AAEA,MAAMC,aAAa,GAAG,MAAM,IAAIC,KAAJ,CAAU,CAAV,EAAaC,IAAb,CAAkB,CAAlB,EAAqBC,GAArB,CAAyB,MAAMC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,CAA/B,CAA5B;;AAEA,MAAMC,QAAQ,GAAG,OAAO;AACtBC,EAAAA,MAAM,EAAE,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,MAAzD,CADc;AAEtBC,EAAAA,QAAQ,EAAE,CACR;AACEC,IAAAA,KAAK,EAAE,kBADT;AAEEC,IAAAA,eAAe,EAAE,SAFnB;AAGEC,IAAAA,WAAW,EAAE,SAHf;AAIEC,IAAAA,WAAW,EAAE,CAJf;AAKEC,IAAAA,oBAAoB,EAAE,SALxB;AAMEC,IAAAA,gBAAgB,EAAE,SANpB;AAOEC,IAAAA,IAAI,EAAEhB,aAAa;AAPrB,GADQ;AAFY,CAAP,CAAjB;;AAeA,MAAMiB,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE;AADJ,GADM;AAIdC,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,SAAS,EAAE;AACTC,QAAAA,KAAK,EAAE,oBADE;AAETC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFH,OADb;AAKEC,MAAAA,KAAK,EAAE;AACLC,QAAAA,SAAS,EAAE;AADN;AALT,KADK,CADD;AAYNC,IAAAA,KAAK,EAAE,CACL;AACEL,MAAAA,SAAS,EAAE;AACTC,QAAAA,KAAK,EAAE,oBADE;AAETC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFH,OADb;AAKEC,MAAAA,KAAK,EAAE;AACLC,QAAAA,SAAS,EAAE;AADN;AALT,KADK;AAZD;AAJM,CAAhB;;AA8BA,MAAME,kBAAkB,GAAG,MAAM;AAAA;;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAQlC,cAAc,CAAC,QAAD,CAA5B;AACA,QAAM,CAACqB,IAAD,EAAOc,OAAP,IAAkBpC,QAAQ,CAACa,QAAQ,EAAT,CAAhC;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsC,UAAU,GAAGC,WAAW,CAAC,MAAM;AACnCF,MAAAA,OAAO,CAACvB,QAAQ,EAAT,CAAP;AACD,KAF6B,EAE3B,IAF2B,CAA9B;AAGA,WAAQ,MAAM;AACZ0B,MAAAA,aAAa,CAACF,UAAD,CAAb;AACD,KAFD;AAGD,GAPQ,EAON,EAPM,CAAT;AASA,sBACE,QAAC,GAAD;AAAK,IAAA,EAAE,EAAE,EAAT;AAAa,IAAA,EAAE,EAAE,EAAjB;AAAqB,IAAA,EAAE,EAAE,CAAzB;AAAA,2BACE,QAAC,IAAD;AAAA,6BACE,QAAC,QAAD;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,iCACE;AAAI,YAAA,SAAS,EAAC,WAAd;AAAA,sBAA2BF,CAAC,CAAC,2CAAD;AAA5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,GAAD;AAAK,UAAA,IAAI,EAAEb,IAAX;AAAiB,UAAA,OAAO,EAAEC;AAA1B;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAzBD;;GAAMW,kB;UACUjC,c;;;KADViC,kB;AA2BN,eAAeA,kBAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport { Bar } from 'react-chartjs-2';\n\nconst getRandomData = () => new Array(7).fill(0).map(() => Math.floor(Math.random() * 100));\n\nconst getState = () => ({\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [\n    {\n      label: 'My First dataset',\n      backgroundColor: '#FF6384',\n      borderColor: '#FF6384',\n      borderWidth: 1,\n      hoverBackgroundColor: '#FF6384',\n      hoverBorderColor: '#FF6384',\n      data: getRandomData(),\n    },\n  ],\n});\n\nconst options = {\n  legend: {\n    position: 'bottom',\n  },\n  scales: {\n    xAxes: [\n      {\n        gridLines: {\n          color: 'rgb(204, 204, 204)',\n          borderDash: [3, 3],\n        },\n        ticks: {\n          fontColor: 'rgb(204, 204, 204)',\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          color: 'rgb(204, 204, 204)',\n          borderDash: [3, 3],\n        },\n        ticks: {\n          fontColor: 'rgb(204, 204, 204)',\n        },\n      },\n    ],\n  },\n};\n\nconst RandomAnimatedBars = () => {\n  const { t } = useTranslation('common');\n  const [data, setData] = useState(getState());\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setData(getState());\n    }, 4000);\n    return (() => {\n      clearInterval(intervalId);\n    });\n  }, []);\n\n  return (\n    <Col md={12} lg={12} xl={6}>\n      <Card>\n        <CardBody>\n          <div className=\"card__title\">\n            <h5 className=\"bold-text\">{t('charts.react_chartjs.random_animated_bars')}</h5>\n          </div>\n          <Bar data={data} options={options} />\n        </CardBody>\n      </Card>\n    </Col>\n  );\n};\n\nexport default RandomAnimatedBars;\n"]},"metadata":{},"sourceType":"module"}