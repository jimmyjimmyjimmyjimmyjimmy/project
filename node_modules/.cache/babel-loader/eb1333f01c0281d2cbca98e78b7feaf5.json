{"ast":null,"code":"var _jsxFileName = \"/Users/WAVE/Documents/project/src/shared/components/form/DropZoneMultiple.jsx\";\nimport React from 'react';\nimport Dropzone from 'react-dropzone';\nimport PropTypes from 'prop-types';\nimport { renderComponentField } from '@/shared/components/form/FormField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DropZoneMultipleField = ({\n  name,\n  value,\n  onChange\n}) => {\n  const files = value;\n\n  const onDrop = onDropFiles => {\n    onChange(onDropFiles.map(fl => Object.assign(fl, {\n      preview: URL.createObjectURL(fl)\n    })));\n  };\n\n  const removeFile = (index, e) => {\n    e.preventDefault();\n    onChange(value.filter((val, i) => i !== index));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropzone dropzone--multiple\",\n    children: [/*#__PURE__*/_jsxDEV(Dropzone, {\n      className: \"dropzone__input\",\n      accept: \"image/jpeg, image/png\",\n      name: name,\n      onDrop: filesToUpload => {\n        onDrop(value ? value.concat(filesToUpload) : filesToUpload);\n      },\n      children: ({\n        getRootProps,\n        getInputProps\n      }) => /*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps(),\n        className: \"dropzone__input\",\n        children: [(!files || files.length === 0) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropzone__drop-here\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"lnr lnr-upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 17\n          }, this), \" Drop file here to upload\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), files && Array.isArray(files) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropzone__imgs-wrapper\",\n      children: files.map((file, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropzone__img\",\n        style: {\n          backgroundImage: `url(${file.preview})`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"dropzone__img-name\",\n          children: file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"dropzone__img-delete\",\n          type: \"button\",\n          onClick: e => removeFile(i, e),\n          children: \"Remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }, this)]\n      }, file.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_c = DropZoneMultipleField;\nDropZoneMultipleField.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    files: PropTypes.string\n  }))]).isRequired\n};\nexport default _c2 = renderComponentField(DropZoneMultipleField);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DropZoneMultipleField\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/WAVE/Documents/project/src/shared/components/form/DropZoneMultiple.jsx"],"names":["React","Dropzone","PropTypes","renderComponentField","DropZoneMultipleField","name","value","onChange","files","onDrop","onDropFiles","map","fl","Object","assign","preview","URL","createObjectURL","removeFile","index","e","preventDefault","filter","val","i","filesToUpload","concat","getRootProps","getInputProps","length","Array","isArray","file","backgroundImage","propTypes","func","isRequired","string","oneOfType","arrayOf","shape"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Dropzone from 'react-dropzone';\nimport PropTypes from 'prop-types';\nimport { renderComponentField } from '@/shared/components/form/FormField';\n\nconst DropZoneMultipleField = ({ name, value, onChange }) => {\n  const files = value;\n  const onDrop = (onDropFiles) => {\n    onChange(onDropFiles.map(fl => Object.assign(fl, {\n      preview: URL.createObjectURL(fl),\n    })));\n  };\n  const removeFile = (index, e) => {\n    e.preventDefault();\n    onChange(value.filter((val, i) => i !== index));\n  };\n\n  return (\n    <div className=\"dropzone dropzone--multiple\">\n      <Dropzone\n        className=\"dropzone__input\"\n        accept=\"image/jpeg, image/png\"\n        name={name}\n        onDrop={(filesToUpload) => {\n          onDrop(value ? value.concat(filesToUpload) : filesToUpload);\n        }}\n      >\n        {({ getRootProps, getInputProps }) => (\n          <div {...getRootProps()} className=\"dropzone__input\">\n            {(!files || files.length === 0)\n            && (\n              <div className=\"dropzone__drop-here\">\n                <span className=\"lnr lnr-upload\" /> Drop file here to upload\n              </div>\n            )}\n            <input {...getInputProps()} />\n          </div>\n        )}\n      </Dropzone>\n      {files && Array.isArray(files)\n      && (\n        <div className=\"dropzone__imgs-wrapper\">\n          {files.map((file, i) => (\n            <div className=\"dropzone__img\" key={file.name} style={{ backgroundImage: `url(${file.preview})` }}>\n              <p className=\"dropzone__img-name\">{file.name}</p>\n              <button className=\"dropzone__img-delete\" type=\"button\" onClick={e => removeFile(i, e)}>\n                Remove\n              </button>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nDropZoneMultipleField.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      files: PropTypes.string,\n    })),\n  ]).isRequired,\n};\n\nexport default renderComponentField(DropZoneMultipleField);\n"]},"metadata":{},"sourceType":"module"}