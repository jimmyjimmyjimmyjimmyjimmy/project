{"ast":null,"code":"var _jsxFileName = \"/Users/WAVE/Documents/project/src/containers/Todo/components/form/ItemEditModal.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Modal } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { ThemeProps } from '@/shared/prop-types/ReducerProps';\nimport ItemEditModalForm from './ItemEditModalForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst priorityOptions = [{\n  value: 'high',\n  label: 'high'\n}, {\n  value: 'medium',\n  label: 'medium'\n}, {\n  value: 'low',\n  label: 'low'\n}];\n\nconst ItemEditModal = ({\n  todoElements,\n  currentEditItem,\n  changeShowEditModal,\n  editTodoElementAction,\n  addTodoElementAction,\n  showEditModal,\n  theme,\n  rtl\n}) => {\n  _s();\n\n  const [priority, setPriority] = useState({\n    value: 'low',\n    label: 'low'\n  });\n  const [dueDate, setDueDate] = useState(new Date());\n  useEffect(() => {\n    if (currentEditItem) {\n      setPriority({\n        value: currentEditItem.priority,\n        label: currentEditItem.priority\n      });\n      setDueDate(new Date(currentEditItem.date));\n    } else {\n      setPriority({\n        value: 'low',\n        label: 'low'\n      });\n      setDueDate(new Date());\n    }\n  }, [currentEditItem, todoElements]);\n\n  const handleDateChange = date => {\n    setDueDate(date);\n  };\n\n  const handlePriorityChange = option => {\n    setPriority(option);\n  };\n\n  const handleSubmit = formData => {\n    let tempDueData = new Date();\n\n    if (dueDate) {\n      tempDueData = dueDate;\n    }\n\n    const updatedTodoData = { ...currentEditItem,\n      title: formData.title,\n      description: formData.description,\n      priority: priority.value,\n      date: new Intl.DateTimeFormat('en-US').format(tempDueData)\n    };\n\n    if (!currentEditItem) {\n      updatedTodoData.id = -Date.now(); // new elements will have id < 0\n\n      updatedTodoData.isCompleted = false;\n      updatedTodoData.isArchived = false;\n    }\n\n    if (updatedTodoData.title !== '') {\n      if (!currentEditItem) {\n        addTodoElementAction(updatedTodoData);\n      } else {\n        editTodoElementAction(updatedTodoData);\n      }\n\n      changeShowEditModal();\n    }\n  };\n\n  const modalClasses = classNames({\n    'todo__add-modal': true\n  }, theme.className, `${rtl}-support`);\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: showEditModal,\n    toggle: changeShowEditModal,\n    className: modalClasses,\n    children: /*#__PURE__*/_jsxDEV(ItemEditModalForm, {\n      initialValues: currentEditItem,\n      onSubmit: handleSubmit,\n      changeShowEditModal: changeShowEditModal,\n      handleDateChange: handleDateChange,\n      handlePriorityChange: handlePriorityChange,\n      currentEditItem: currentEditItem,\n      dueDate: dueDate,\n      priority: priority,\n      priorityOptions: priorityOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ItemEditModal, \"mlWlko2HKXEWSsLSV2qLXoo4yAg=\");\n\n_c = ItemEditModal;\nItemEditModal.propTypes = {\n  todoElements: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  currentEditItem: PropTypes.shape(),\n  changeShowEditModal: PropTypes.func.isRequired,\n  editTodoElementAction: PropTypes.func.isRequired,\n  addTodoElementAction: PropTypes.func.isRequired,\n  showEditModal: PropTypes.bool.isRequired,\n  theme: ThemeProps.isRequired,\n  rtl: PropTypes.string.isRequired\n};\nItemEditModal.defaultProps = {\n  currentEditItem: null\n};\nexport default ItemEditModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ItemEditModal\");","map":{"version":3,"sources":["/Users/WAVE/Documents/project/src/containers/Todo/components/form/ItemEditModal.jsx"],"names":["React","useEffect","useState","classNames","Modal","PropTypes","ThemeProps","ItemEditModalForm","priorityOptions","value","label","ItemEditModal","todoElements","currentEditItem","changeShowEditModal","editTodoElementAction","addTodoElementAction","showEditModal","theme","rtl","priority","setPriority","dueDate","setDueDate","Date","date","handleDateChange","handlePriorityChange","option","handleSubmit","formData","tempDueData","updatedTodoData","title","description","Intl","DateTimeFormat","format","id","now","isCompleted","isArchived","modalClasses","className","propTypes","arrayOf","shape","isRequired","func","bool","string","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Modal } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { ThemeProps } from '@/shared/prop-types/ReducerProps';\nimport ItemEditModalForm from './ItemEditModalForm';\n\nconst priorityOptions = [\n  { value: 'high', label: 'high' },\n  { value: 'medium', label: 'medium' },\n  { value: 'low', label: 'low' },\n];\n\nconst ItemEditModal = ({\n  todoElements,\n  currentEditItem, changeShowEditModal, editTodoElementAction, addTodoElementAction,\n  showEditModal, theme, rtl,\n}) => {\n  const [priority, setPriority] = useState({ value: 'low', label: 'low' });\n  const [dueDate, setDueDate] = useState(new Date());\n\n  useEffect(() => {\n    if (currentEditItem) {\n      setPriority({ value: currentEditItem.priority, label: currentEditItem.priority });\n      setDueDate(new Date(currentEditItem.date));\n    } else {\n      setPriority({ value: 'low', label: 'low' });\n      setDueDate(new Date());\n    }\n  }, [currentEditItem, todoElements]);\n\n  const handleDateChange = (date) => {\n    setDueDate(date);\n  };\n\n  const handlePriorityChange = (option) => {\n    setPriority(option);\n  };\n\n  const handleSubmit = (formData) => {\n    let tempDueData = new Date();\n    if (dueDate) {\n      tempDueData = dueDate;\n    }\n    const updatedTodoData = {\n      ...currentEditItem,\n      title: formData.title,\n      description: formData.description,\n      priority: priority.value,\n      date: new Intl.DateTimeFormat('en-US').format(tempDueData),\n    };\n    if (!currentEditItem) {\n      updatedTodoData.id = -(Date.now()); // new elements will have id < 0\n      updatedTodoData.isCompleted = false;\n      updatedTodoData.isArchived = false;\n    }\n    if (updatedTodoData.title !== '') {\n      if (!currentEditItem) {\n        addTodoElementAction(updatedTodoData);\n      } else {\n        editTodoElementAction(updatedTodoData);\n      }\n      changeShowEditModal();\n    }\n  };\n\n  const modalClasses = classNames({\n    'todo__add-modal': true,\n  }, theme.className, `${rtl}-support`);\n\n  return (\n    <Modal\n      isOpen={showEditModal}\n      toggle={changeShowEditModal}\n      className={modalClasses}\n    >\n      <ItemEditModalForm\n        initialValues={currentEditItem}\n        onSubmit={handleSubmit}\n        changeShowEditModal={changeShowEditModal}\n        handleDateChange={handleDateChange}\n        handlePriorityChange={handlePriorityChange}\n        currentEditItem={currentEditItem}\n        dueDate={dueDate}\n        priority={priority}\n        priorityOptions={priorityOptions}\n      />\n    </Modal>\n  );\n};\n\nItemEditModal.propTypes = {\n  todoElements: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  currentEditItem: PropTypes.shape(),\n  changeShowEditModal: PropTypes.func.isRequired,\n  editTodoElementAction: PropTypes.func.isRequired,\n  addTodoElementAction: PropTypes.func.isRequired,\n  showEditModal: PropTypes.bool.isRequired,\n  theme: ThemeProps.isRequired,\n  rtl: PropTypes.string.isRequired,\n};\n\nItemEditModal.defaultProps = {\n  currentEditItem: null,\n};\n\nexport default ItemEditModal;\n"]},"metadata":{},"sourceType":"module"}